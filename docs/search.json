[{"path":"/articles/advanced-use.html","id":"updating-variables-in-master-i-e--left-table","dir":"Articles","previous_headings":"","what":"Updating variables in master (i.e., left) table","title":"Advanced use","text":"Imagine variable country available two tables ’re going join. one five things:","code":""},{"path":"/articles/advanced-use.html","id":"use-variable-country-as-one-of-the-key-variables","dir":"Articles","previous_headings":"Updating variables in master (i.e., left) table","what":"1. Use variable country as one of the key variables","title":"Advanced use","text":"default don’t use argument ","code":"# The variables with the same name, `id` and `x`, are used as key # variables. merge(x, y)[] #> > removing key variables `id` and `country` from yvars #>  #> -- JOYn Report -- #>  #>    report n percent #> 1:      x 4   44.4% #> 2:  x & y 1   11.1% #> 3:      y 4   44.4% #> 4:  total 9    100% #> ---------------------------------------------------------- End of JOYn report -- #>    id country  t gdp report #> 1:  1      16  1  11  x & y #> 2:  2       3  1  NA      x #> 3:  2      17 NA  15      y #> 4:  3      20 NA  10      y #> 5:  3      NA  2  NA      x #> 6:  4      12  2  NA      x #> 7:  5      18 NA  20      y #> 8:  6      19 NA  13      y #> 9: NA      15 NA  NA      x"},{"path":"/articles/advanced-use.html","id":"ignore-variable-country-and-dont-bring-it-into-the-resulting-table","dir":"Articles","previous_headings":"Updating variables in master (i.e., left) table","what":"2. Ignore variable country and don’t bring it into the resulting table","title":"Advanced use","text":"default include country part key variables argument .","code":"merge(x, y, by = \"id\")[] #> > removing key variables `id` from yvars #> i variable `country` in table y is ignored because arguments `update_NAs` and #> `update_values` are FALSE. #>  #> -- JOYn Report -- #>  #>    report n percent #> 1:      x 2   28.6% #> 2:  x & y 3   42.9% #> 3:      y 2   28.6% #> 4:  total 7    100% #> ---------------------------------------------------------- End of JOYn report -- #>    id  t country gdp report #> 1:  1  1      16  11  x & y #> 2:  2  1       3  15  x & y #> 3:  3  2      NA  10  x & y #> 4:  4  2      12  NA      x #> 5:  5 NA      NA  20      y #> 6:  6 NA      NA  13      y #> 7: NA NA      15  NA      x"},{"path":"/articles/advanced-use.html","id":"update-only-nas-in-table-x","dir":"Articles","previous_headings":"Updating variables in master (i.e., left) table","what":"3. Update only NAs in table x","title":"Advanced use","text":"Update NAs values variable country table x (.e., left master) actual values matching observations country table y (.e, right using). case, actual values country table x remain unchanged.","code":"merge(x, y, by = \"id\", update_NAs = TRUE)[] #> > removing key variables `id` from yvars #>  #> -- JOYn Report -- #>  #>        report n percent #> 1: NA updated 1   14.3% #> 2:          x 2   28.6% #> 3:      x & y 2   28.6% #> 4:          y 2   28.6% #> 5:      total 7    100% #> ---------------------------------------------------------- End of JOYn report -- #>    id  t country gdp     report #> 1:  1  1      16  11      x & y #> 2:  2  1       3  15      x & y #> 3:  3  2      20  10 NA updated #> 4:  4  2      12  NA          x #> 5:  5 NA      18  20          y #> 6:  6 NA      19  13          y #> 7: NA NA      15  NA          x"},{"path":"/articles/advanced-use.html","id":"update-actual-values-in-table-x","dir":"Articles","previous_headings":"Updating variables in master (i.e., left) table","what":"4. Update actual values in table x","title":"Advanced use","text":"Update values–NAs actual–variable country table x (.e., left master) actual values matching observations country table y (.e, right using). Also, notice output table : values different country x country y updated. , matching observations, values two country variables , reporting variable says “x & y” rather “value updated”, know update make. Finally, NAs variable country table y, actual values x unchanged, get “updated” status reporting variable. Yet, way solve , explained using argument keep_y_in_x.","code":"# notice that only the value that are  merge(x, y, by = \"id\", update_values = TRUE)[] #> > removing key variables `id` from yvars #>  #> -- JOYn Report -- #>  #>           report n percent #> 1:    NA updated 1   14.3% #> 2:   not updated 2   28.6% #> 3: value updated 1   14.3% #> 4:         x & y 1   14.3% #> 5:             y 2   28.6% #> 6:         total 7    100% #> ---------------------------------------------------------- End of JOYn report -- #>    id  t country gdp        report #> 1:  1  1      16  11         x & y #> 2:  2  1      17  15 value updated #> 3:  3  2      20  10    NA updated #> 4:  4  2      12  NA   not updated #> 5:  5 NA      18  20             y #> 6:  6 NA      19  13             y #> 7: NA NA      15  NA   not updated"},{"path":"/articles/advanced-use.html","id":"keep-matching-names-variables-from-y-into-x-no-update","dir":"Articles","previous_headings":"Updating variables in master (i.e., left) table","what":"5. Keep matching-names variables from y into x (No update)","title":"Advanced use","text":"Bring variable country y resulting table different name (country.y). need update country x, including actual values NAs country y, following, keeping mind reporting variable useful anymore.","code":"merge(x, y, by = \"id\", keep_y_in_x = TRUE)[] #> > removing key variables `id` from yvars #> i variable `country` in table y is ignored because arguments `update_NAs` and #> `update_values` are FALSE. #>  #> -- JOYn Report -- #>  #>    report n percent #> 1:      x 2   28.6% #> 2:  x & y 3   42.9% #> 3:      y 2   28.6% #> 4:  total 7    100% #> ---------------------------------------------------------- End of JOYn report -- #>    id  t country gdp country.y report #> 1:  1  1      16  11        16  x & y #> 2:  2  1       3  15        17  x & y #> 3:  3  2      NA  10        20  x & y #> 4:  4  2      12  NA        NA      x #> 5:  5 NA      NA  20        18      y #> 6:  6 NA      NA  13        19      y #> 7: NA NA      15  NA        NA      x dd <- merge(x, y, by = \"id\", keep_y_in_x = TRUE, verbose = FALSE) dd[, country := country.y    ][, country.y := NULL]  dd[] #>    id  t country gdp report #> 1:  1  1      16  11  x & y #> 2:  2  1      17  15  x & y #> 3:  3  2      20  10  x & y #> 4:  4  2      NA  NA      x #> 5:  5 NA      18  20      y #> 6:  6 NA      19  13      y #> 7: NA NA      NA  NA      x"},{"path":"/articles/advanced-use.html","id":"bring-specific-variables-from-y-into-x","dir":"Articles","previous_headings":"","what":"Bring specific variables from y into x","title":"Advanced use","text":"times, don’t need join variable table y table x, just . default, joyn brings variables y x argument yvars set TRUE. Yet, set FALSE NULL bring variable y x, reporting variable, many times nice trick. Finally, set yvars argument specific name variable y, variable carried join.","code":"# Bring all variables updating values merge(x, y, by = \"id\", update_values = TRUE)[] #> > removing key variables `id` from yvars #>  #> -- JOYn Report -- #>  #>           report n percent #> 1:    NA updated 1   14.3% #> 2:   not updated 2   28.6% #> 3: value updated 1   14.3% #> 4:         x & y 1   14.3% #> 5:             y 2   28.6% #> 6:         total 7    100% #> ---------------------------------------------------------- End of JOYn report -- #>    id  t country gdp        report #> 1:  1  1      16  11         x & y #> 2:  2  1      17  15 value updated #> 3:  3  2      20  10    NA updated #> 4:  4  2      12  NA   not updated #> 5:  5 NA      18  20             y #> 6:  6 NA      19  13             y #> 7: NA NA      15  NA   not updated  # Bring no variables from y merge(x, y, by = \"id\", yvars = FALSE)[] #>  #> -- JOYn Report -- #>  #>    report n percent #> 1:      x 2   28.6% #> 2:  x & y 3   42.9% #> 3:      y 2   28.6% #> 4:  total 7    100% #> ---------------------------------------------------------- End of JOYn report -- #>    id  t country report #> 1:  1  1      16  x & y #> 2:  2  1       3  x & y #> 3:  3  2      NA  x & y #> 4:  4  2      12      x #> 5:  5 NA      NA      y #> 6:  6 NA      NA      y #> 7: NA NA      15      x  # Bring only variable gdp from table y. So variable country won't be updated either because table y is filtered before the coparison of variables is done.  merge(x, y, by = \"id\", yvars = \"gdp\")[] #>  #> -- JOYn Report -- #>  #>    report n percent #> 1:      x 2   28.6% #> 2:  x & y 3   42.9% #> 3:      y 2   28.6% #> 4:  total 7    100% #> ---------------------------------------------------------- End of JOYn report -- #>    id  t country gdp report #> 1:  1  1      16  11  x & y #> 2:  2  1       3  15  x & y #> 3:  3  2      NA  10  x & y #> 4:  4  2      12  NA      x #> 5:  5 NA      NA  20      y #> 6:  6 NA      NA  13      y #> 7: NA NA      15  NA      x"},{"path":"/articles/advanced-use.html","id":"rolling-joins","dir":"Articles","previous_headings":"","what":"Rolling joins","title":"Advanced use","text":"Coming soon","code":""},{"path":"/articles/advanced-use.html","id":"misc-","dir":"Articles","previous_headings":"","what":"Misc.","title":"Advanced use","text":"Coming soon","code":""},{"path":"/articles/general-use.html","id":"the-basics","dir":"Articles","previous_headings":"","what":"The basics","title":"General use","text":"Notice joyn::merge masks base::merge, ideal. Also, loading joyn tables lazy-loaded memory, x1, x2, x3, x4, y1, y2, y3, y4.","code":"library(joyn) #>  #> Attaching package: 'joyn' #> The following object is masked from 'package:base': #>  #>     merge library(data.table) x1 = data.table(id = c(1L, 1L, 2L, 3L, NA_integer_),                 t  = c(1L, 2L, 1L, 2L, NA_integer_),                 x  = 11:15)  y1 = data.table(id = c(1,2, 4),                 y  = c(11L, 15L, 16))   x2 = data.table(id = c(1, 4, 2, 3, NA),                 t  = c(1L, 2L, 1L, 2L, NA_integer_),                 x  = c(16, 12, NA, NA, 15))   y2 = data.table(id = c(1, 2, 5, 6, 3),                 yd = c(1, 2, 5, 6, 3),                 y  = c(11L, 15L, 20L, 13L, 10L),                 x  = c(16:20))   y3 <- data.table(id = c(\"c\",\"b\", \"c\", \"a\"),                  y  = c(11L, 15L, 18L, 20L))  x3 <- data.table(id=c(\"c\",\"b\", \"d\"),                  v=8:10,                  foo=c(4,2, 7))  x4 = data.table(id1 = c(1, 1, 2, 3, 3),                 id2 = c(1, 1, 2, 3, 4),                 t   = c(1L, 2L, 1L, 2L, NA_integer_),                 x   = c(16, 12, NA, NA, 15))   y4 = data.table(id  = c(1, 2, 5, 6, 3),                 id2 = c(1, 1, 2, 3, 4),                 y   = c(11L, 15L, 20L, 13L, 10L),                 x   = c(16:20))"},{"path":"/articles/general-use.html","id":"summary-table","dir":"Articles","previous_headings":"The basics","what":"Summary table","title":"General use","text":"can see examples default joyn displays small summary table. can use reporting format report variables, setting argument reporttype numeric, similar Stata’s output.","code":"# Natural join. i.e., using as key all the variables that appear in both tables. # without display the resulting table. merge(x1, y1) #> > removing key variables `id` from yvars #>  #> -- JOYn Report -- #>  #>    report n percent #> 1:      x 2   33.3% #> 2:  x & y 3     50% #> 3:      y 1   16.7% #> 4:  total 6    100% #> ---------------------------------------------------------- End of JOYn report -- #>    id  t  x  y report #> 1:  1  1 11 11  x & y #> 2:  1  2 12 11  x & y #> 3:  2  1 13 15  x & y #> 4:  3  2 14 NA      x #> 5:  4 NA NA 16      y #> 6: NA NA 15 NA      x"},{"path":"/articles/general-use.html","id":"key-variables","dir":"Articles","previous_headings":"The basics","what":"Key variables","title":"General use","text":"Since object returned data.table, display results console concatenating pair squared brackets end call. merge(x1, y1)[] instead merge(x1, y1). key variables different names tables, can create equivalency element vector.","code":"# Natural join.  display the results. merge(x1, y1)[] #> > removing key variables `id` from yvars #>  #> -- JOYn Report -- #>  #>    report n percent #> 1:      x 2   33.3% #> 2:  x & y 3     50% #> 3:      y 1   16.7% #> 4:  total 6    100% #> ---------------------------------------------------------- End of JOYn report -- #>    id  t  x  y report #> 1:  1  1 11 11  x & y #> 2:  1  2 12 11  x & y #> 3:  2  1 13 15  x & y #> 4:  3  2 14 NA      x #> 5:  4 NA NA 16      y #> 6: NA NA 15 NA      x  # Making explicit the key variables (strongly suggested) merge(x1, y1, by = \"id\")[] #> > removing key variables `id` from yvars #> -- JOYn Report -- #>  #>    report n percent #> 1:      x 2   33.3% #> 2:  x & y 3     50% #> 3:      y 1   16.7% #> 4:  total 6    100% #> ---------------------------------------------------------- End of JOYn report -- #>    id  t  x  y report #> 1:  1  1 11 11  x & y #> 2:  1  2 12 11  x & y #> 3:  2  1 13 15  x & y #> 4:  3  2 14 NA      x #> 5:  4 NA NA 16      y #> 6: NA NA 15 NA      x # joining by id1 in x and id in y merge(x4, y4, by = c(\"id1 = id\")) #> > removing key variables `keyby1` from yvars #> i variables `id2` and `x` in table y are ignored because arguments `update_NAs` #> and `update_values` are FALSE. #>  #> -- JOYn Report -- #>  #>    report n percent #> 1:  x & y 5   71.4% #> 2:      y 2   28.6% #> 3:  total 7    100% #> ---------------------------------------------------------- End of JOYn report -- #>    id1 id2  t  x  y report #> 1:   1   1  1 16 11  x & y #> 2:   1   1  2 12 11  x & y #> 3:   2   2  1 NA 15  x & y #> 4:   3   3  2 NA 10  x & y #> 5:   3   4 NA 15 10  x & y #> 6:   5  NA NA NA 20      y #> 7:   6  NA NA NA 13      y  # joining by id1 in x and id in y, and id2  in both merge(x4, y4, by = c(\"id1 = id\", \"id2\")) #> > removing key variables `keyby1` and `id2` from yvars #> i variable `x` in table y is ignored because arguments `update_NAs` and #> `update_values` are FALSE. #>  #> -- JOYn Report -- #>  #>    report n percent #> 1:      x 2     25% #> 2:  x & y 3   37.5% #> 3:      y 3   37.5% #> 4:  total 8    100% #> ---------------------------------------------------------- End of JOYn report -- #>    id1 id2  t  x  y report #> 1:   1   1  1 16 11  x & y #> 2:   1   1  2 12 11  x & y #> 3:   2   2  1 NA NA      x #> 4:   2   1 NA NA 15      y #> 5:   3   3  2 NA NA      x #> 6:   3   4 NA 15 10  x & y #> 7:   5   2 NA NA 20      y #> 8:   6   3 NA NA 13      y"},{"path":"/articles/general-use.html","id":"match-type","dir":"Articles","previous_headings":"","what":"Match type","title":"General use","text":"Match type refers correspondence exists observations joining tables. Following Stata’s convention, four different match types, one--one (1:1) , one--many (1:m), many--one (m:1), many--many (m:m) joins. default m:m, following general R’s practice, use highly discouraged. recommend always specify match type joining tables ensure output correct. Indeed, don’t care match types don’t think necessary use particular needs, might fine without joyn. Using wording Stata manual 1:1: specifies one--one match merge. variables specified uniquely identify single observations table. 1:m m:1: specify one--many many--one match merges, respectively. means tables observations uniquely identify variables , table many (two ) observations identify variables . m:m refers many--many joins. variables uniquely identify observations either table. Matching performed combining observations equal values ; within matching values, first observation master (.e. left x) table matched first matching observation using (.e. right y) table; second, second; . unequal number observations within group, last observation shorter group used repeatedly match subsequent observations longer group. Suppose think data uniquely identified variable id, . used match_type = \"1:1\" get error, letting know something right.","code":"# Merging correctly but getting error because something is not right in the data merge(x3, y3, by = \"id\", match_type = \"1:1\") #> x table y is not uniquely identified by `id` #> Error: match type inconsistency #> i you could use `return_report = TRUE` in `joyn::is_id()` #>     to see where the problem is  # Merging wrongly but getting NO errors because  you did not use match_type merge(x3, y3, by = \"id\") #> > removing key variables `id` from yvars #>  #> -- JOYn Report -- #>  #>    report n percent #> 1:      x 1     20% #> 2:  x & y 3     60% #> 3:      y 1     20% #> 4:  total 5    100% #> ---------------------------------------------------------- End of JOYn report -- #>    id  v foo  y report #> 1:  a NA  NA 20      y #> 2:  b  9   2 15  x & y #> 3:  c  8   4 11  x & y #> 4:  c  8   4 18  x & y #> 5:  d 10   7 NA      x"},{"path":"/articles/general-use.html","id":"join-type","dir":"Articles","previous_headings":"","what":"Join type","title":"General use","text":"Join type refers observations kept join. avoid confusion argument match_type, decided name argument join_type keep. end, want specify observations want keep. argument plays role mimicking behavior dplyr’s functions left_join, right_join, inner_join, full_join, default. keep = \"full\", default, keeps observations x y, regardless whether match . keep = \"left\" keep = \"master\" keeps observations x, regardless whether match y. keep = \"right\" keep = \"using\" keeps observations y, regardless whether match x. keep = \"inner\" keeps observations match tables.","code":"# Full merge merge(x1, y1) #> > removing key variables `id` from yvars #>  #> -- JOYn Report -- #>  #>    report n percent #> 1:      x 2   33.3% #> 2:  x & y 3     50% #> 3:      y 1   16.7% #> 4:  total 6    100% #> ---------------------------------------------------------- End of JOYn report -- #>    id  t  x  y report #> 1:  1  1 11 11  x & y #> 2:  1  2 12 11  x & y #> 3:  2  1 13 15  x & y #> 4:  3  2 14 NA      x #> 5:  4 NA NA 16      y #> 6: NA NA 15 NA      x # keep obs in x merge(x1, y1, keep = \"left\") #> > removing key variables `id` from yvars #>  #> -- JOYn Report -- #>  #>    report n percent #> 1:      x 2     40% #> 2:  x & y 3     60% #> 3:  total 5    100% #> ---------------------------------------------------------- End of JOYn report -- #>    id  t  x  y report #> 1:  1  1 11 11  x & y #> 2:  1  2 12 11  x & y #> 3:  2  1 13 15  x & y #> 4:  3  2 14 NA      x #> 5: NA NA 15 NA      x # keep obs in y merge(x1, y1, keep = \"right\") #> > removing key variables `id` from yvars #>  #> -- JOYn Report -- #>  #>    report n percent #> 1:  x & y 3     75% #> 2:      y 1     25% #> 3:  total 4    100% #> ---------------------------------------------------------- End of JOYn report -- #>    id  t  x  y report #> 1:  1  1 11 11  x & y #> 2:  1  2 12 11  x & y #> 3:  2  1 13 15  x & y #> 4:  4 NA NA 16      y # keep matching obs in both tables merge(x1, y1, keep = \"inner\") #> > removing key variables `id` from yvars #>  #> -- JOYn Report -- #>  #>    report n percent #> 1:  x & y 3    100% #> 2:  total 3    100% #> ---------------------------------------------------------- End of JOYn report -- #>    id t  x  y report #> 1:  1 1 11 11  x & y #> 2:  1 2 12 11  x & y #> 3:  2 1 13 15  x & y"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"R.Andres Castaneda. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Castaneda R (2021). joyn: Tool Diagnosis Tables Joins Complementary Join Features. R package version 0.1.4, https://github.com/randrescastaneda/joyn.","code":"@Manual{,   title = {joyn: Tool for Diagnosis of Tables Joins and Complementary Join Features},   author = {R.Andres Castaneda},   year = {2021},   note = {R package version 0.1.4},   url = {https://github.com/randrescastaneda/joyn}, }"},{"path":"/index.html","id":"joyn","dir":"","previous_headings":"","what":"An R package for joining tables","title":"An R package for joining tables","text":"joyn provides user set tools analyze quality merging (.e., joining) data frames, JOY join tables joyn. inspired command merge statistical software Stata.","code":""},{"path":"/index.html","id":"motivation","dir":"","previous_headings":"","what":"Motivation","title":"An R package for joining tables","text":"objective joyn make life easier joining tables. former Stata user (still work Stata much work R now), missed, now, ability assess accuracy join mergin two tables R. one single command, merge, Stata allows user perform kind equi-join. reason , default, Stata merges fully tables one user keep observation needs. importantly, Stata forces user know joining tables relate . tables one--one (1:1 ) relation, common find one--many (1:m), many--one (m:1), many--many (m:m) relations. Finally, Stata’s merge command returns default variable useful information table’s join. , following features value added joyn: joyn performs full join default (.e., resulting table observations original, joining tables). Yet, user can select “left”, “right” “inner” joins using argument keep. vain, joyn keeps columns form joining tables. Two caveats worth mentioning. tables variables name, default joyn bring variables second (.e, right, using) table first (.e., left, master) table. Yet, can one two things. First, can use arguments update_values updateNA update value variable first table ones second table. , can use argument keep_y_in_x = TRUE keep variables different name. can use argument yvars select variables want bring second table first one. joyn allows user perform one--one (1:1) , one--many (1:m), many--one (m:1), many--many (m:m) joins. default m:m, following general R’s practice, highly discouraged. Since want use joyn, recommend always specify right relationship joining tables. joyn returns reporting variable status join.","code":""},{"path":"/index.html","id":"regarding-speed-and-flexibility","dir":"","previous_headings":"","what":"Regarding speed and flexibility","title":"An R package for joining tables","text":"Notice joyn intended super fast joining tool. construction, lot things make slower tools . However, joyn basically wrapper around data.table’s merge.data.table() function. , lost speed joyn mainly due evaluating several conditions, creating reporting variable, present nice summary table end process. Also, keep mind joyn intended informative, displays messages inform join (can silence message joyn, including reporting table, using argument verbose = FALSE). , course, makes joyn little slower using regular data.table syntax. However, loss speed much ’re gaining lot information. main reason joyn little slower pure data.table always perform full join data way Stata . , joyn intended information verification joins tables. working project executes many (say, 1000) joins constantly merging super big data sets, recommended use data.table’s syntaz x directly. now, flexibility joyn limited basic joins, yet used useful ones. want learn different kinds joins available data.table relate dplyr, recommend start blog post.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"An R package for joining tables","text":"can install stable version joyn CRAN : development version GitHub :","code":"install.packages(\"joyn\") # install.packages(\"devtools\") devtools::install_github(\"randrescastaneda/joyn\")"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"An R package for joining tables","text":"","code":"library(joyn) #>  #> Attaching package: 'joyn' #> The following object is masked from 'package:base': #>  #>     merge  x1 #>    id  t  x #> 1:  1  1 11 #> 2:  1  2 12 #> 3:  2  1 13 #> 4:  3  2 14 #> 5: NA NA 15 y1 #>    id  y #> 1:  1 11 #> 2:  2 15 #> 3:  4 16  # using commong variable `id` as key. merge(x1, y1)[] #> > removing key variables `id` from yvars #>  #> -- JOYn Report -- #>  #>    report n percent #> 1:      x 2   33.3% #> 2:  x & y 3     50% #> 3:      y 1   16.7% #> 4:  total 6    100% #> ---------------------------------------------------------- End of JOYn report -- #>    id  t  x  y report #> 1:  1  1 11 11  x & y #> 2:  1  2 12 11  x & y #> 3:  2  1 13 15  x & y #> 4:  3  2 14 NA      x #> 5:  4 NA NA 16      y #> 6: NA NA 15 NA      x  # keep just those observations that match merge(x1, y1, keep = \"inner\")[] #> > removing key variables `id` from yvars #> -- JOYn Report -- #>  #>    report n percent #> 1:  x & y 3    100% #> 2:  total 3    100% #> ---------------------------------------------------------- End of JOYn report -- #>    id t  x  y report #> 1:  1 1 11 11  x & y #> 2:  1 2 12 11  x & y #> 3:  2 1 13 15  x & y   x2  #>    id  t  x #> 1:  1  1 16 #> 2:  4  2 12 #> 3:  2  1 NA #> 4:  3  2 NA #> 5: NA NA 15  y2 #>    id yd  y  x #> 1:  1  1 11 16 #> 2:  2  2 15 17 #> 3:  5  5 20 18 #> 4:  6  6 13 19 #> 5:  3  3 10 20   # Bad merge for not specifying by argument merge(x2, y2)[] #> > removing key variables `id` and `x` from yvars #> -- JOYn Report -- #>  #>    report n percent #> 1:      x 4   44.4% #> 2:  x & y 1   11.1% #> 3:      y 4   44.4% #> 4:  total 9    100% #> ---------------------------------------------------------- End of JOYn report -- #>    id  x  t yd  y report #> 1:  1 16  1  1 11  x & y #> 2:  2 17 NA  2 15      y #> 3:  2 NA  1 NA NA      x #> 4:  3 20 NA  3 10      y #> 5:  3 NA  2 NA NA      x #> 6:  4 12  2 NA NA      x #> 7:  5 18 NA  5 20      y #> 8:  6 19 NA  6 13      y #> 9: NA 15 NA NA NA      x  # good merge, ignoring variable x from y merge(x2, y2, by = \"id\")[] #> > removing key variables `id` from yvars #> i variable `x` in table y is ignored because arguments `update_NAs` and #> `update_values` are FALSE. #>  #> -- JOYn Report -- #>  #>    report n percent #> 1:      x 2   28.6% #> 2:  x & y 3   42.9% #> 3:      y 2   28.6% #> 4:  total 7    100% #> ---------------------------------------------------------- End of JOYn report -- #>    id  t  x yd  y report #> 1:  1  1 16  1 11  x & y #> 2:  2  1 NA  2 15  x & y #> 3:  3  2 NA  3 10  x & y #> 4:  4  2 12 NA NA      x #> 5:  5 NA NA  5 20      y #> 6:  6 NA NA  6 13      y #> 7: NA NA 15 NA NA      x  # update NAs in x variable form x merge(x2, y2, by = \"id\", update_NAs = TRUE)[] #> > removing key variables `id` from yvars #> -- JOYn Report -- #>  #>        report n percent #> 1: NA updated 2   28.6% #> 2:          x 2   28.6% #> 3:      x & y 1   14.3% #> 4:          y 2   28.6% #> 5:      total 7    100% #> ---------------------------------------------------------- End of JOYn report -- #>    id  t  x yd  y     report #> 1:  1  1 16  1 11      x & y #> 2:  2  1 17  2 15 NA updated #> 3:  3  2 20  3 10 NA updated #> 4:  4  2 12 NA NA          x #> 5:  5 NA 18  5 20          y #> 6:  6 NA 19  6 13          y #> 7: NA NA 15 NA NA          x  # Update values in x with variables from y merge(x2, y2, by = \"id\", update_values = TRUE)[] #> > removing key variables `id` from yvars #> -- JOYn Report -- #>  #>         report n percent #> 1:  NA updated 2   28.6% #> 2: not updated 2   28.6% #> 3:       x & y 1   14.3% #> 4:           y 2   28.6% #> 5:       total 7    100% #> ---------------------------------------------------------- End of JOYn report -- #>    id  t  x yd  y      report #> 1:  1  1 16  1 11       x & y #> 2:  2  1 17  2 15  NA updated #> 3:  3  2 20  3 10  NA updated #> 4:  4  2 12 NA NA not updated #> 5:  5 NA 18  5 20           y #> 6:  6 NA 19  6 13           y #> 7: NA NA 15 NA NA not updated   # do not bring any variable from Y into x, just the report merge(x2, y2, by = \"id\", yvars = NULL)[] #>  #> -- JOYn Report -- #>  #>    report n percent #> 1:      x 2   28.6% #> 2:  x & y 3   42.9% #> 3:      y 2   28.6% #> 4:  total 7    100% #> ---------------------------------------------------------- End of JOYn report -- #>    id  t  x report #> 1:  1  1 16  x & y #> 2:  2  1 NA  x & y #> 3:  3  2 NA  x & y #> 4:  4  2 12      x #> 5:  5 NA NA      y #> 6:  6 NA NA      y #> 7: NA NA 15      x"},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 joyn authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/reference/freq_table.html","id":null,"dir":"Reference","previous_headings":"","what":"tabulate simple frequencies — freq_table","title":"tabulate simple frequencies — freq_table","text":"tabulate one variable frequencies","code":""},{"path":"/reference/freq_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"tabulate simple frequencies — freq_table","text":"","code":"freq_table(x, byvar, digits = 1, na.rm = TRUE)"},{"path":"/reference/freq_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"tabulate simple frequencies — freq_table","text":"x data frame byvar character: name variable tabulate. Use Standard evaluation. digits numeric: number decimal places display. Default 1. na.rm logical: TRUE remove NAs calculations. Default TRUE","code":""},{"path":"/reference/freq_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"tabulate simple frequencies — freq_table","text":"data.table frequencies.","code":""},{"path":"/reference/freq_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"tabulate simple frequencies — freq_table","text":"","code":"freq_table(x4, \"id1\") #> Error in is.data.table(x): object 'x4' not found"},{"path":"/reference/is_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Make sure the match type is correct — is_id","title":"Make sure the match type is correct — is_id","text":"Make sure match type correct","code":""},{"path":"/reference/is_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make sure the match type is correct — is_id","text":"","code":"is_id(dt, by, verbose = TRUE, return_report = FALSE)"},{"path":"/reference/is_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make sure the match type is correct — is_id","text":"dt either right left table argument merge verbose logical: TRUE messages displayed return_report logical: TRUE, returns data summary duplicates. FALSE, returns logical value depending whether dt uniquely identified ","code":""},{"path":"/reference/is_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make sure the match type is correct — is_id","text":"logical data.frame, depending value argument return_report","code":""},{"path":"/reference/is_id.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make sure the match type is correct — is_id","text":"","code":"is_id(y3, by = \"id\") #> Error in is.data.table(dt): object 'y3' not found is_id(y3, by = \"id\", return_report = TRUE) #> Error in is.data.table(dt): object 'y3' not found"},{"path":"/reference/merge.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge two tables — merge","title":"Merge two tables — merge","text":"main , basically, function joyn.","code":""},{"path":"/reference/merge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge two tables — merge","text":"","code":"merge(   x,   y,   by = intersect(names(x), names(y)),   yvars = TRUE,   match_type = c(\"m:m\", \"m:1\", \"1:m\", \"1:1\"),   keep = c(\"full\", \"left\", \"master\", \"right\", \"using\", \"inner\"),   update_values = FALSE,   update_NAs = update_values,   reportvar = \"report\",   reporttype = c(\"character\", \"numeric\"),   roll = NULL,   keep_y_in_x = FALSE,   sort = TRUE,   verbose = getOption(\"joyn.verbose\"),   allow.cartesian = NULL )"},{"path":"/reference/merge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge two tables — merge","text":"x data frame: referred left R terminology, master Stata terminology. y data frame: referred right R terminology, using Stata terminology. character vector variables join . NULL, default, joyn natural join, using variables common names across two tables. message lists variables can check right (suppress message, simply explicitly list variables want join). join different variables x y use vector expressions. example, = c(\"= b\", \"z\") use \"\" x, \"b\" y, \"z\" tables. yvars character: Vector variable names kept merge. TRUE (default), keeps brings variables y x. FALSE NULL, bring variable x, report generated. match_type character: one \"m:m\", \"m:1\", \"1:m\", \"1:1\". Default \"m:m\" since default generally used joins R. However, following Stata's recommendation, better explicit use three match types (See details match types sections). keep character: One \"full\", \"left\", \"master\", \"right\", \"using\", \"inner\". Default \"full\". Even though regular behavior joins R, objective joyn present diagnosis join, must use default full join. Yet, \"left\" \"master\", keeps observations matched tables ones match x. ones y discarded. \"right\" \"using\", keeps observations matched tables ones match y. ones x discarded. \"inner\", keeps observations matched tables. update_values logical: TRUE, update values variables x actual variables y name ones x. NAs y used update actual values x. Yet, default, NAs x updated values y. avoid , make sure set update_NAs = FALSE update_NAs logical: TRUE, update NA values variables x actual values variables y name ones x. FALSE, NA values updated, even update_values TRUE reportvar character: Name reporting variable. Default \"report\". variable \"_merge\" Stata performing merge. FALSE NULL, reporting variable excluded final table, though summary join display concluding. reporttype character: One \"character\" \"numeric\". Default \"character\". \"numeric\", reporting variable contain  numeric codes source contents observation joined table. roll double: implemented keep_y_in_x logical: TRUE, keep original variable y tables common variable names. Thus, prefix \"y.\" added original name distinguish resulting variable joined table. sort logical: TRUE, sort key variables . Default TRUE. verbose logical: FALSE, display message (programmer's option). Default TRUE. allow.cartesian logical: Check documentation official web site. Default NULL, implies join \"1:1\" FALSE, join \"m\" , converted TRUE. specifying TRUE FALSE force behavior join.","code":""},{"path":"/reference/merge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge two tables — merge","text":"data.table joining x y.","code":""},{"path":"/reference/merge.html","id":"match-types","dir":"Reference","previous_headings":"","what":"match types","title":"Merge two tables — merge","text":"Using wording Stata manual 1:1: specifies one--one match merge. variables specified  uniquely identify single observations table. 1:m m:1: specify one--many many--one match merges, respectively. means tables observations uniquely identify variables , table many (two )  observations identify variables m:m refers many--many merge. variables uniquely identify observations either table. Matching performed combining observations equal values ; within matching values, first observation master (.e. left x) table matched first matching observation using (.e. right y) table; second, second; . unequal number observations within group, last observation shorter group used repeatedly match subsequent observations longer group.","code":""},{"path":"/reference/merge.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge two tables — merge","text":"","code":"# Simple merge library(data.table) x1 = data.table(id = c(1L, 1L, 2L, 3L, NA_integer_), t  = c(1L, 2L, 1L, 2L, NA_integer_), x  = 11:15)  y1 = data.table(id = 1:2,                 y  = c(11L, 15L))  x2 = data.table(id = c(1, 1, 2, 3, NA),                 t  = c(1L, 2L, 1L, 2L, NA_integer_),                 x  = c(16, 12, NA, NA, 15))  y2 = data.table(id = c(1, 2, 5, 6, 3),               yd = c(1, 2, 5, 6, 3),               y  = c(11L, 15L, 20L, 13L, 10L),               x  = c(16:20)) merge(x1, y1) #> > removing key variables `id` from yvars #>  #> -- JOYn Report -- #>  #>    report n percent #> 1:      x 2     40% #> 2:  x & y 3     60% #> 3:  total 5    100% #> ---------------------------------------------------------- End of JOYn report -- #>    id  t  x  y report #> 1:  1  1 11 11  x & y #> 2:  1  2 12 11  x & y #> 3:  2  1 13 15  x & y #> 4:  3  2 14 NA      x #> 5: NA NA 15 NA      x  # Bad merge for not specifying by argument merge(x2, y2) #> > removing key variables `id` and `x` from yvars #>  #> -- JOYn Report -- #>  #>    report n percent #> 1:      x 4   44.4% #> 2:  x & y 1   11.1% #> 3:      y 4   44.4% #> 4:  total 9    100% #> ---------------------------------------------------------- End of JOYn report -- #>    id  x  t yd  y report #> 1:  1 12  2 NA NA      x #> 2:  1 16  1  1 11  x & y #> 3:  2 17 NA  2 15      y #> 4:  2 NA  1 NA NA      x #> 5:  3 20 NA  3 10      y #> 6:  3 NA  2 NA NA      x #> 7:  5 18 NA  5 20      y #> 8:  6 19 NA  6 13      y #> 9: NA 15 NA NA NA      x  # good merge, ignoring variable x from y merge(x2, y2, by = \"id\") #> > removing key variables `id` from yvars #> i variable `x` in table y is ignored because arguments `update_NAs` and #> `update_values` are FALSE. #>  #> -- JOYn Report -- #>  #>    report n percent #> 1:      x 1   14.3% #> 2:  x & y 4   57.1% #> 3:      y 2   28.6% #> 4:  total 7    100% #> ---------------------------------------------------------- End of JOYn report -- #>    id  t  x yd  y report #> 1:  1  1 16  1 11  x & y #> 2:  1  2 12  1 11  x & y #> 3:  2  1 NA  2 15  x & y #> 4:  3  2 NA  3 10  x & y #> 5:  5 NA NA  5 20      y #> 6:  6 NA NA  6 13      y #> 7: NA NA 15 NA NA      x  # update NAs in x variable form x merge(x2, y2, by = \"id\", update_NAs = TRUE) #> > removing key variables `id` from yvars #>  #> -- JOYn Report -- #>  #>        report n percent #> 1: NA updated 2   28.6% #> 2:          x 1   14.3% #> 3:      x & y 2   28.6% #> 4:          y 2   28.6% #> 5:      total 7    100% #> ---------------------------------------------------------- End of JOYn report -- #>    id  t  x yd  y     report #> 1:  1  1 16  1 11      x & y #> 2:  1  2 12  1 11      x & y #> 3:  2  1 17  2 15 NA updated #> 4:  3  2 20  3 10 NA updated #> 5:  5 NA 18  5 20          y #> 6:  6 NA 19  6 13          y #> 7: NA NA 15 NA NA          x  # Update values in x with variables from y merge(x2, y2, by = \"id\", update_values = TRUE) #> > removing key variables `id` from yvars #>  #> -- JOYn Report -- #>  #>           report n percent #> 1:    NA updated 2   28.6% #> 2:   not updated 1   14.3% #> 3: value updated 1   14.3% #> 4:         x & y 1   14.3% #> 5:             y 2   28.6% #> 6:         total 7    100% #> ---------------------------------------------------------- End of JOYn report -- #>    id  t  x yd  y        report #> 1:  1  1 16  1 11         x & y #> 2:  1  2 16  1 11 value updated #> 3:  2  1 17  2 15    NA updated #> 4:  3  2 20  3 10    NA updated #> 5:  5 NA 18  5 20             y #> 6:  6 NA 19  6 13             y #> 7: NA NA 15 NA NA   not updated"},{"path":"/reference/possible_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Find possible unique identifies of data frame — possible_ids","title":"Find possible unique identifies of data frame — possible_ids","text":"Find possible unique identifies data frame","code":""},{"path":"/reference/possible_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find possible unique identifies of data frame — possible_ids","text":"","code":"possible_ids(   dt,   exclude = NULL,   include = NULL,   verbose = getOption(\"possible_ids.verbose\") )"},{"path":"/reference/possible_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find possible unique identifies of data frame — possible_ids","text":"dt data frame exclude character: Exclude variables selected identifiers. either name variables one type variable prefixed \"_\". instance, \"_numeric\" \"_character\". include character: Name variable included, might belong group excluded exclude verbose logical: FALSE message displayed. Default TRUE","code":""},{"path":"/reference/possible_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find possible unique identifies of data frame — possible_ids","text":"list possible identifiers","code":""},{"path":"/reference/possible_ids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find possible unique identifies of data frame — possible_ids","text":"","code":"possible_ids(x4) #> Error in is.data.frame(dt): object 'x4' not found"},{"path":"/reference/x1.html","id":null,"dir":"Reference","previous_headings":"","what":"Testing data x1 — x1","title":"Testing data x1 — x1","text":"testing data","code":""},{"path":"/reference/x1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Testing data x1 — x1","text":"","code":"x1"},{"path":"/reference/x1.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Testing data x1 — x1","text":"data frame 5 rows 3 variables:","code":""},{"path":"/reference/x2.html","id":null,"dir":"Reference","previous_headings":"","what":"Testing data x2 — x2","title":"Testing data x2 — x2","text":"testing data","code":""},{"path":"/reference/x2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Testing data x2 — x2","text":"","code":"x2"},{"path":"/reference/x2.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Testing data x2 — x2","text":"data frame 5 rows 3 variables:","code":""},{"path":"/reference/x3.html","id":null,"dir":"Reference","previous_headings":"","what":"Testing data x3 — x3","title":"Testing data x3 — x3","text":"testing data","code":""},{"path":"/reference/x3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Testing data x3 — x3","text":"","code":"x3"},{"path":"/reference/x3.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Testing data x3 — x3","text":"data frame 3 rows 3 variables:","code":""},{"path":"/reference/x4.html","id":null,"dir":"Reference","previous_headings":"","what":"Testing data x4 — x4","title":"Testing data x4 — x4","text":"testing data","code":""},{"path":"/reference/x4.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Testing data x4 — x4","text":"","code":"x4"},{"path":"/reference/x4.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Testing data x4 — x4","text":"data frame 5 rows 4 variables:","code":""},{"path":"/reference/y1.html","id":null,"dir":"Reference","previous_headings":"","what":"Testing data y1 — y1","title":"Testing data y1 — y1","text":"testing data","code":""},{"path":"/reference/y1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Testing data y1 — y1","text":"","code":"y1"},{"path":"/reference/y1.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Testing data y1 — y1","text":"data frame 3 rows 2 variables:","code":""},{"path":"/reference/y2.html","id":null,"dir":"Reference","previous_headings":"","what":"Testing data y2 — y2","title":"Testing data y2 — y2","text":"testing data","code":""},{"path":"/reference/y2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Testing data y2 — y2","text":"","code":"y2"},{"path":"/reference/y2.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Testing data y2 — y2","text":"data frame 5 rows 4 variables:","code":""},{"path":"/reference/y3.html","id":null,"dir":"Reference","previous_headings":"","what":"Testing data y3 — y3","title":"Testing data y3 — y3","text":"testing data","code":""},{"path":"/reference/y3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Testing data y3 — y3","text":"","code":"y3"},{"path":"/reference/y3.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Testing data y3 — y3","text":"data frame 4 rows 2 variables:","code":""},{"path":"/reference/y4.html","id":null,"dir":"Reference","previous_headings":"","what":"Testing data y4 — y4","title":"Testing data y4 — y4","text":"testing data","code":""},{"path":"/reference/y4.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Testing data y4 — y4","text":"","code":"y4"},{"path":"/reference/y4.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Testing data y4 — y4","text":"data frame 5 rows 3 variables:","code":""},{"path":"/news/index.html","id":"joyn-014","dir":"Changelog","previous_headings":"","what":"joyn 0.1.4","title":"joyn 0.1.4","text":"update_NAs now FALSE even update_values TRUE Select rows--keep transformation updated values NAs avoid keeping rows y match x whose values got updated update_values = TRUE Solve issues #1 #19 Change data.table::merge.data.table syntax joins. makes easier work consistent accross different join types.","code":""},{"path":"/news/index.html","id":"joyn-013","dir":"Changelog","previous_headings":"","what":"joyn 0.1.3","title":"joyn 0.1.3","text":"CRAN release: 2021-04-28 Convert external data external data.","code":""},{"path":"/news/index.html","id":"joyn-012","dir":"Changelog","previous_headings":"","what":"joyn 0.1.2","title":"joyn 0.1.2","text":"Add function possible_ids() identify variables suitable uniquely identify database.","code":""},{"path":"/news/index.html","id":"joyn-0-1-2","dir":"Changelog","previous_headings":"","what":"joyn 0.1.1","title":"joyn 0.1.2","text":"Add function is_id() check whether table uniquely identified key variables Add function freq_table() substitute janitor::tabyl. makes convenient users janitor installed.","code":""},{"path":"/news/index.html","id":"joyn-0-1-2-1","dir":"Changelog","previous_headings":"","what":"joyn 0.1.0","title":"joyn 0.1.2","text":"Fix bug argument using “=” “==”.","code":""},{"path":"/news/index.html","id":"joyn-0-1-2-2","dir":"Changelog","previous_headings":"","what":"joyn 0.0.1","title":"joyn 0.1.2","text":"First Public release","code":""}]
