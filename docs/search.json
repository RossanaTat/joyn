[{"path":"/articles/adv-functionalities.html","id":"advanced-use","dir":"Articles","previous_headings":"","what":"Advanced use","title":"Advanced functionalities","text":"vignette let explore additional features available joyn, example use case. Suppose want join tables x y, variable country available . one five things:","code":""},{"path":"/articles/adv-functionalities.html","id":"use-variable-country-as-one-of-the-key-variables","dir":"Articles","previous_headings":"Advanced use","what":"1. Use variable country as one of the key variables","title":"Advanced functionalities","text":"don’t use argument , joyn consider country id key variables default given common x y. Alternatively, can specify join country","code":"# The variables with the same name, `id` and `country`, are used as key # variables.  joyn(x = x,       y = y) #>  #> ── JOYn Report ── #>  #>    .joyn n percent #> 1:     x 4   44.4% #> 2: x & y 1   11.1% #> 3:     y 4   44.4% #> 4: total 9    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ℹ ❯ Joyn's report available in variable .joyn #> ℹ ❯ Removing key variables id and country from id, gdp, and country #> ● Timing: The full joyn is executed in 0.000739 seconds #> ● Timing: the entire joyn function, including checks, is executed in 0.071694 #> seconds #>    id  t country gdp .joyn #> 1: NA NA      15  NA     x #> 2:  1  1      16  11 x & y #> 3:  2  1       3  NA     x #> 4:  2 NA      17  15     y #> 5:  3  2      NA  NA     x #> 6:  3 NA      20  10     y #> 7:  4  2      12  NA     x #> 8:  5 NA      18  20     y #> 9:  6 NA      19  13     y # Joining by country  joyn(x = x,       y = y,       by = \"country\") #>  #> ── JOYn Report ── #>  #>    .joyn n percent #> 1:     x 4   44.4% #> 2: x & y 1   11.1% #> 3:     y 4   44.4% #> 4: total 9    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ℹ ❯ Joyn's report available in variable .joyn #> ℹ ❯ Removing key variables country from id, gdp, and country #> ● Timing: The full joyn is executed in 9e-05 seconds #> ● Timing: the entire joyn function, including checks, is executed in 0.04067 #> seconds #>    id  t country gdp .joyn #> 1:  3  2      NA  NA     x #> 2:  2  1       3  NA     x #> 3:  4  2      12  NA     x #> 4: NA NA      15  NA     x #> 5:  1  1      16  11 x & y #> 6: NA NA      17  15     y #> 7: NA NA      18  20     y #> 8: NA NA      19  13     y #> 9: NA NA      20  10     y"},{"path":"/articles/adv-functionalities.html","id":"ignore-the-values-of-country-from-y-and-dont-bring-it-into-the-resulting-table","dir":"Articles","previous_headings":"Advanced use","what":"2. Ignore the values of country from y and don’t bring it into the resulting table","title":"Advanced functionalities","text":"default include country part key variables argument .","code":"joyn(x = x,       y = y,       by = \"id\") #>  #> ── JOYn Report ── #>  #>    .joyn n percent #> 1:     x 2   28.6% #> 2: x & y 3   42.9% #> 3:     y 2   28.6% #> 4: total 7    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ℹ ❯ Joyn's report available in variable .joyn #> ℹ ❯ Removing key variables id from id, gdp, and country #> ● Timing: The full joyn is executed in 8e-05 seconds #> ● Timing: the entire joyn function, including checks, is executed in 0.032082 #> seconds #>    id  t country gdp .joyn #> 1: NA NA      15  NA     x #> 2:  1  1      16  11 x & y #> 3:  2  1       3  15 x & y #> 4:  3  2      NA  10 x & y #> 5:  4  2      12  NA     x #> 6:  5 NA      NA  20     y #> 7:  6 NA      NA  13     y"},{"path":"/articles/adv-functionalities.html","id":"update-only-nas-in-table-x","dir":"Articles","previous_headings":"Advanced use","what":"3. Update only NAs in table x","title":"Advanced functionalities","text":"Another possibility make use update_NAs argument joyn(). allows update NAs values variable country table x actual values matching observations country table y. case, actual values country table x remain unchanged.","code":"joyn(x = x,      y = y,       by = \"id\",       update_NAs = TRUE) #>  #> ── JOYn Report ── #>  #>         .joyn n percent #> 1: NA updated 3   42.9% #> 2:          x 2   28.6% #> 3:      x & y 2   28.6% #> 4:      total 7    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ℹ ❯ Joyn's report available in variable .joyn #> ℹ ❯ Removing key variables id from id, gdp, and country #> ● Timing: The full joyn is executed in 7.9e-05 seconds #> ● Timing: the entire joyn function, including checks, is executed in 0.033163 #> seconds #>    id  t country gdp      .joyn #> 1: NA NA      15  NA          x #> 2:  1  1      16  11      x & y #> 3:  2  1       3  15      x & y #> 4:  3  2      20  10 NA updated #> 5:  4  2      12  NA          x #> 6:  5 NA      18  20 NA updated #> 7:  6 NA      19  13 NA updated"},{"path":"/articles/adv-functionalities.html","id":"update-actual-values-in-table-x","dir":"Articles","previous_headings":"Advanced use","what":"4. Update actual values in table x","title":"Advanced functionalities","text":"can also update values - NAs actual - variable country table x actual values matching observations country y. done setting update_values = TRUE. Notice reportvar allows keep track update worked. case, value update means values different country x country y updated. However, let’s consider possible cases: , matching observations, values two country variables , reporting variable report x & y instead (know update make). NAs country y, actual values x unchanged, see updated status reporting variable. Nevertheless, notice another way bring country y x. done argument keep_y_in_x (see 5. ⬇️)","code":"# Notice that only the value that are   joyn(x = x,       y = y,       by = \"id\",       update_values = TRUE) #>  #> ── JOYn Report ── #>  #>            .joyn n percent #> 1:    NA updated 3   42.9% #> 2:   not updated 2   28.6% #> 3: value updated 2   28.6% #> 4:         total 7    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ℹ ❯ Joyn's report available in variable .joyn #> ℹ ❯ Removing key variables id from id, gdp, and country #> ● Timing: The full joyn is executed in 8.3e-05 seconds #> ● Timing: the entire joyn function, including checks, is executed in 0.040125 #> seconds #>    id  t country gdp         .joyn #> 1: NA NA      15  NA   not updated #> 2:  1  1      16  11 value updated #> 3:  2  1      17  15 value updated #> 4:  3  2      20  10    NA updated #> 5:  4  2      12  NA   not updated #> 6:  5 NA      18  20    NA updated #> 7:  6 NA      19  13    NA updated"},{"path":[]},{"path":"/articles/adv-functionalities.html","id":"keep-matching-names-variable-from-y-into-x--not-updating-values-in-x","dir":"Articles","previous_headings":"Advanced use > 5. Keep original country variable from y into returning table","what":"(Keep matching-names variable from y into x -not updating values in x)","title":"Advanced functionalities","text":"Another available option bringing original variable country y resulting table, without using update values x. order distinguish country x country y, joyn assign suffix variable’s name: get country.y country.x. can done specifying keep_common_vars = TRUE.","code":"joyn(x = x,       y = y,       by = \"id\",       keep_common_vars = TRUE) #>  #> ── JOYn Report ── #>  #>    .joyn n percent #> 1:     x 2   28.6% #> 2: x & y 3   42.9% #> 3:     y 2   28.6% #> 4: total 7    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ℹ ❯ Joyn's report available in variable .joyn #> ℹ ❯ Removing key variables id from id, gdp, and country #> ● Timing: The full joyn is executed in 7.9e-05 seconds #> ● Timing: the entire joyn function, including checks, is executed in 0.038683 #> seconds #>    id  t country.x gdp country.y .joyn #> 1: NA NA        15  NA        NA     x #> 2:  1  1        16  11        16 x & y #> 3:  2  1         3  15        17 x & y #> 4:  3  2        NA  10        20 x & y #> 5:  4  2        12  NA        NA     x #> 6:  5 NA        NA  20        18     y #> 7:  6 NA        NA  13        19     y"},{"path":"/articles/adv-functionalities.html","id":"bring-other-variables-from-y-into-returning-table","dir":"Articles","previous_headings":"Advanced use","what":"Bring other variables from y into returning table","title":"Advanced functionalities","text":"joyn , can also bring non common variables y resulting table. fact can specify y_vars_to_keep, shown example : Notice set y_vars_to_keep = FALSE y_vars_to_keep = NULL, joyn won’t bring variable returning table.","code":"# Keeping variable gdp   joyn(x = x,       y = y,       by = \"id\",       y_vars_to_keep = \"gdp\") #>  #> ── JOYn Report ── #>  #>    .joyn n percent #> 1:     x 2   28.6% #> 2: x & y 3   42.9% #> 3:     y 2   28.6% #> 4: total 7    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ℹ ❯ Joyn's report available in variable .joyn #> ● Timing: The full joyn is executed in 8e-05 seconds #> ● Timing: the entire joyn function, including checks, is executed in 0.033541 #> seconds #>    id  t country gdp .joyn #> 1: NA NA      15  NA     x #> 2:  1  1      16  11 x & y #> 3:  2  1       3  15 x & y #> 4:  3  2      NA  10 x & y #> 5:  4  2      12  NA     x #> 6:  5 NA      NA  20     y #> 7:  6 NA      NA  13     y"},{"path":"/articles/advanced-use.html","id":"updating-variables-in-master-i-e--left-table","dir":"Articles","previous_headings":"","what":"Updating variables in master (i.e., left) table","title":"Advanced use","text":"Imagine variable country available two tables ’re going join. one five things:","code":""},{"path":"/articles/advanced-use.html","id":"use-variable-country-as-one-of-the-key-variables","dir":"Articles","previous_headings":"Updating variables in master (i.e., left) table","what":"1. Use variable country as one of the key variables","title":"Advanced use","text":"default don’t use argument ","code":"# The variables with the same name, `id` and `x`, are used as key # variables. merge(x, y)[] #> > removing key variables `id` and `country` from yvars #>  #> -- JOYn Report -- #>  #>    report n percent #> 1:      x 4   44.4% #> 2:  x & y 1   11.1% #> 3:      y 4   44.4% #> 4:  total 9    100% #> ---------------------------------------------------------- End of JOYn report -- #>    id country  t gdp report #> 1:  1      16  1  11  x & y #> 2:  2       3  1  NA      x #> 3:  2      17 NA  15      y #> 4:  3      20 NA  10      y #> 5:  3      NA  2  NA      x #> 6:  4      12  2  NA      x #> 7:  5      18 NA  20      y #> 8:  6      19 NA  13      y #> 9: NA      15 NA  NA      x"},{"path":"/articles/advanced-use.html","id":"ignore-variable-country-and-dont-bring-it-into-the-resulting-table","dir":"Articles","previous_headings":"Updating variables in master (i.e., left) table","what":"2. Ignore variable country and don’t bring it into the resulting table","title":"Advanced use","text":"default include country part key variables argument .","code":"merge(x, y, by = \"id\")[] #> > removing key variables `id` from yvars #> i variable `country` in table y is ignored because arguments `update_NAs` and #> `update_values` are FALSE. #>  #> -- JOYn Report -- #>  #>    report n percent #> 1:      x 2   28.6% #> 2:  x & y 3   42.9% #> 3:      y 2   28.6% #> 4:  total 7    100% #> ---------------------------------------------------------- End of JOYn report -- #>    id  t country gdp report #> 1:  1  1      16  11  x & y #> 2:  2  1       3  15  x & y #> 3:  3  2      NA  10  x & y #> 4:  4  2      12  NA      x #> 5:  5 NA      NA  20      y #> 6:  6 NA      NA  13      y #> 7: NA NA      15  NA      x"},{"path":"/articles/advanced-use.html","id":"update-only-nas-in-table-x","dir":"Articles","previous_headings":"Updating variables in master (i.e., left) table","what":"3. Update only NAs in table x","title":"Advanced use","text":"Update NAs values variable country table x (.e., left master) actual values matching observations country table y (.e, right using). case, actual values country table x remain unchanged.","code":"merge(x, y, by = \"id\", update_NAs = TRUE)[] #> > removing key variables `id` from yvars #>  #> -- JOYn Report -- #>  #>        report n percent #> 1: NA updated 1   14.3% #> 2:          x 2   28.6% #> 3:      x & y 2   28.6% #> 4:          y 2   28.6% #> 5:      total 7    100% #> ---------------------------------------------------------- End of JOYn report -- #>    id  t country gdp     report #> 1:  1  1      16  11      x & y #> 2:  2  1       3  15      x & y #> 3:  3  2      20  10 NA updated #> 4:  4  2      12  NA          x #> 5:  5 NA      18  20          y #> 6:  6 NA      19  13          y #> 7: NA NA      15  NA          x"},{"path":"/articles/advanced-use.html","id":"update-actual-values-in-table-x","dir":"Articles","previous_headings":"Updating variables in master (i.e., left) table","what":"4. Update actual values in table x","title":"Advanced use","text":"Update values–NAs actual–variable country table x (.e., left master) actual values matching observations country table y (.e, right using). Also, notice output table : values different country x country y updated. , matching observations, values two country variables , reporting variable says “x & y” rather “value updated”, know update make. Finally, NAs variable country table y, actual values x unchanged, get “updated” status reporting variable. Yet, way solve , explained using argument keep_y_in_x.","code":"# notice that only the value that are  merge(x, y, by = \"id\", update_values = TRUE)[] #> > removing key variables `id` from yvars #>  #> -- JOYn Report -- #>  #>           report n percent #> 1:    NA updated 1   14.3% #> 2:   not updated 2   28.6% #> 3: value updated 1   14.3% #> 4:         x & y 1   14.3% #> 5:             y 2   28.6% #> 6:         total 7    100% #> ---------------------------------------------------------- End of JOYn report -- #>    id  t country gdp        report #> 1:  1  1      16  11         x & y #> 2:  2  1      17  15 value updated #> 3:  3  2      20  10    NA updated #> 4:  4  2      12  NA   not updated #> 5:  5 NA      18  20             y #> 6:  6 NA      19  13             y #> 7: NA NA      15  NA   not updated"},{"path":"/articles/advanced-use.html","id":"keep-matching-names-variables-from-y-into-x-no-update","dir":"Articles","previous_headings":"Updating variables in master (i.e., left) table","what":"5. Keep matching-names variables from y into x (No update)","title":"Advanced use","text":"Bring variable country y resulting table different name (country.y). need update country x, including actual values NAs country y, following, keeping mind reporting variable useful anymore.","code":"merge(x, y, by = \"id\", keep_y_in_x = TRUE)[] #> > removing key variables `id` from yvars #> i variable `country` in table y is ignored because arguments `update_NAs` and #> `update_values` are FALSE. #>  #> -- JOYn Report -- #>  #>    report n percent #> 1:      x 2   28.6% #> 2:  x & y 3   42.9% #> 3:      y 2   28.6% #> 4:  total 7    100% #> ---------------------------------------------------------- End of JOYn report -- #>    id  t country gdp country.y report #> 1:  1  1      16  11        16  x & y #> 2:  2  1       3  15        17  x & y #> 3:  3  2      NA  10        20  x & y #> 4:  4  2      12  NA        NA      x #> 5:  5 NA      NA  20        18      y #> 6:  6 NA      NA  13        19      y #> 7: NA NA      15  NA        NA      x dd <- merge(x, y, by = \"id\", keep_y_in_x = TRUE, verbose = FALSE) dd[, country := country.y    ][, country.y := NULL]  dd[] #>    id  t country gdp report #> 1:  1  1      16  11  x & y #> 2:  2  1      17  15  x & y #> 3:  3  2      20  10  x & y #> 4:  4  2      NA  NA      x #> 5:  5 NA      18  20      y #> 6:  6 NA      19  13      y #> 7: NA NA      NA  NA      x"},{"path":"/articles/advanced-use.html","id":"bring-specific-variables-from-y-into-x","dir":"Articles","previous_headings":"","what":"Bring specific variables from y into x","title":"Advanced use","text":"times, don’t need join variable table y table x, just . default, joyn brings variables y x argument yvars set TRUE. Yet, set FALSE NULL bring variable y x, reporting variable, many times nice trick. Finally, set yvars argument specific name variable y, variable carried join.","code":"# Bring all variables updating values merge(x, y, by = \"id\", update_values = TRUE)[] #> > removing key variables `id` from yvars #>  #> -- JOYn Report -- #>  #>           report n percent #> 1:    NA updated 1   14.3% #> 2:   not updated 2   28.6% #> 3: value updated 1   14.3% #> 4:         x & y 1   14.3% #> 5:             y 2   28.6% #> 6:         total 7    100% #> ---------------------------------------------------------- End of JOYn report -- #>    id  t country gdp        report #> 1:  1  1      16  11         x & y #> 2:  2  1      17  15 value updated #> 3:  3  2      20  10    NA updated #> 4:  4  2      12  NA   not updated #> 5:  5 NA      18  20             y #> 6:  6 NA      19  13             y #> 7: NA NA      15  NA   not updated  # Bring no variables from y merge(x, y, by = \"id\", yvars = FALSE)[] #>  #> -- JOYn Report -- #>  #>    report n percent #> 1:      x 2   28.6% #> 2:  x & y 3   42.9% #> 3:      y 2   28.6% #> 4:  total 7    100% #> ---------------------------------------------------------- End of JOYn report -- #>    id  t country report #> 1:  1  1      16  x & y #> 2:  2  1       3  x & y #> 3:  3  2      NA  x & y #> 4:  4  2      12      x #> 5:  5 NA      NA      y #> 6:  6 NA      NA      y #> 7: NA NA      15      x  # Bring only variable gdp from table y. So variable country won't be updated either because table y is filtered before the coparison of variables is done.  merge(x, y, by = \"id\", yvars = \"gdp\")[] #>  #> -- JOYn Report -- #>  #>    report n percent #> 1:      x 2   28.6% #> 2:  x & y 3   42.9% #> 3:      y 2   28.6% #> 4:  total 7    100% #> ---------------------------------------------------------- End of JOYn report -- #>    id  t country gdp report #> 1:  1  1      16  11  x & y #> 2:  2  1       3  15  x & y #> 3:  3  2      NA  10  x & y #> 4:  4  2      12  NA      x #> 5:  5 NA      NA  20      y #> 6:  6 NA      NA  13      y #> 7: NA NA      15  NA      x"},{"path":"/articles/advanced-use.html","id":"rolling-joins","dir":"Articles","previous_headings":"","what":"Rolling joins","title":"Advanced use","text":"Coming soon","code":""},{"path":"/articles/advanced-use.html","id":"misc-","dir":"Articles","previous_headings":"","what":"Misc.","title":"Advanced use","text":"Coming soon","code":""},{"path":"/articles/aux-functions.html","id":"verifying-if-dt-is-uniquely-identified","dir":"Articles","previous_headings":"","what":"Verifying if dt is uniquely identified","title":"Additional functions","text":"One advantages joyn can perform one--one (1:1), one--many (1:m), many--one (m:1), many--many (m:m) joins. is_id() function might come handy want check whether data table uniquely identified variables want merge - is_id() default. Alternatively, can set return_report = FALSE get summary duplicates.","code":"x1 <- data.table(id = c(1L, 1L, 2L, 3L, NA_integer_),                  t  = c(1L, 2L, 1L, 2L, NA_integer_),                  x  = 11:15,                  c  = c(\"a\", \"b\", \"a\", \"t\"),                  c1 = c(\"h\", \"j\", \"k\", \"l\")) #> Warning in as.data.table.list(x, keep.rownames = keep.rownames, check.names = #> check.names, : Item 4 has 4 rows but longest item has 5; recycled with #> remainder. #> Warning in as.data.table.list(x, keep.rownames = keep.rownames, check.names = #> check.names, : Item 5 has 4 rows but longest item has 5; recycled with #> remainder.  y1 <- data.table(id = c(1,2, 4),                  y  = c(11L, 15L, 16))  # Checking if x1 is uniquely identified by \"id\" with return_report = TRUE  is_id(dt = x1,        by = \"id\") #>  #> ── Duplicates in terms of `id` #>    copies n percent #> 1:      1 3     75% #> 2:      2 1     25% #> 3:  total 4    100% #> ─────────────────────────────────────────────────────── End of is_id() report ── #> [1] FALSE  # Checking duplicates in x1 with return_report = FALSE  is_id(dt = x1,        by = \"id\",        return_report = FALSE) #>  #> ── Duplicates in terms of `id` #>    copies n percent #> 1:      1 3     75% #> 2:      2 1     25% #> 3:  total 4    100% #> ─────────────────────────────────────────────────────── End of is_id() report ── #> [1] FALSE"},{"path":"/articles/aux-functions.html","id":"possible-unique-identifiers","dir":"Articles","previous_headings":"","what":"Possible unique identifiers","title":"Additional functions","text":"joyn, can also identify variables possibly uniquely identify data table x using possible_ids() function. example,","code":"# Identify possible unique identifier excluding variable t possible_ids(dt      = x1,               exclude = \"t\") #> ✔ There are no duplicates in data frame #> → we found 1 possible id #> $V1 #> [1] \"x\"  # Identify possible unique identifier excluding character variables possible_ids(dt      = x1,               exclude = \"_character\") #> ✔ There are no duplicates in data frame #> → we found 1 possible id #> $V1 #> [1] \"x\"  # Identify possible unique identifiers, excluding character variables but considering variable z possible_ids(dt      = x1,               exclude = \"_character\",              include = \"z\") #> ✔ There are no duplicates in data frame #> → we found 1 possible id #> $V1 #> [1] \"x\""},{"path":"/articles/aux-functions.html","id":"verifying-if-data-table-is-balanced","dir":"Articles","previous_headings":"","what":"Verifying if data table is balanced","title":"Additional functions","text":"Additionally, joyn makes available is_balanced() function user. instrumental assessing completeness/balance(?) data table within specified group. default, is_balanced() tell /table balanced. However, can also set return = \"table\" get summary unbalanced observations. words, combinations elements variables present input table.","code":"# Example with return = \"logic\", the default  is_balanced(df = x1,             by = c(\"id\", \"t\")) #> [1] FALSE  # Example with return = \"table\" is_balanced(df = x1,             by = c(\"id\", \"t\"),              return = \"table\") #>   id t #> 1  3 1 #> 2  2 2"},{"path":"/articles/aux-functions.html","id":"tabulating-simple-frequencies","dir":"Articles","previous_headings":"","what":"Tabulating simple frequencies","title":"Additional functions","text":"Finally, joyn also provides function easily generating simple frequency tables, can overview distribution values within data tables.","code":"# Tabulating frequencies of var `id`  freq_table(x     = x1,             byvar = \"id\") #>       id n percent #> 1:  <NA> 1     20% #> 2:     1 2     40% #> 3:     2 1     20% #> 4:     3 1     20% #> 5: total 5    100%  # Removing NAs from the calculation  freq_table(x     = x1,             byvar = \"id\",             na.rm = TRUE) #>       id n percent #> 1:  <NA> 1     20% #> 2:     1 2     40% #> 3:     2 1     20% #> 4:     3 1     20% #> 5: total 5    100%"},{"path":"/articles/dplyr-joins.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"dplyr-joins","text":"Joining data tables joyn particularly convenient allows analyze/aware quality merging. vignette explores dplyr-like join functions available joyn. major objective let employ syntax supposedly already familiar - dplyr one - time benefiting additional tools joyn offers. , obtaining additional information verification joining. four types dplyr-like join functions joyn: Left joins: joyn::left_join() Right joins: joyn::right_join() Full joins: joyn::full_join() Inner joins: joyn::inner_join() wrapper works similar way corresponding dplyr function.","code":"library(joyn) library(data.table)"},{"path":"/articles/dplyr-joins.html","id":"rationale","dir":"Articles","previous_headings":"","what":"Rationale","title":"dplyr-joins","text":"Suppose want perform simple left join tables x1 y1. joyn two possibilities: using joyn() function, specifying keep = \"left\" using joyn::left_join() function addition, use dplyr::left_join() base R merging functions. Consider three options: Comparing results, returning data table produced. However, joyn::left_join() allows enjoy intuitive syntax dplyr additional tools joyn. include additional options customize join performed, availability joyn report, messages informing time execution status join well execution various checks merging. (additional information joyn’s features, please take look articles website.)","code":"x1 <- data.table(id  = c(1L, 1L, 2L, 3L, NA_integer_),                  t   = c(1L, 2L, 1L, 2L, NA_integer_),                  x   = 11:15)  y1 <- data.table(id  = c(1,2, 4),                  y   = c(11L, 15L, 16)) # Option 1  joyn(x          = x1,       y          = y1,       keep       = \"left\",      match_type = \"m:1\") #>  #> ── JOYn Report ── #>  #>    .joyn n percent #> 1:     x 2     40% #> 2: x & y 3     60% #> 3: total 5    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ℹ ❯ Joyn's report available in variable .joyn #> ℹ ❯ Removing key variables id from id and y #> ● Timing: The full joyn is executed in 0.000711 seconds #> ● Timing: the entire joyn function, including checks, is executed in 0.059227 #> seconds #>    id  t  x  y .joyn #> 1: NA NA 15 NA     x #> 2:  1  1 11 11 x & y #> 3:  1  2 12 11 x & y #> 4:  2  1 13 15 x & y #> 5:  3  2 14 NA     x  # Option 2   joyn::left_join(x            = x1,                  y            = y1,                  relationship = \"many-to-one\")  #>  #> ── JOYn Report ── #>  #>    .joyn n percent #> 1:     x 2     40% #> 2: x & y 3     60% #> 3: total 5    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ⚠ Warning: joyn does not currently allow inequality joins, so keep = NULL will #> retain only keys in x #> ℹ ❯ Joyn's report available in variable .joyn #> ℹ ❯ Removing key variables id from id and y #> ● Timing: The full joyn is executed in 8.1e-05 seconds #> ● Timing: the entire joyn function, including checks, is executed in 0.038923 #> seconds #>    id  t  x  y .joyn #> 1: NA NA 15 NA     x #> 2:  1  1 11 11 x & y #> 3:  1  2 12 11 x & y #> 4:  2  1 13 15 x & y #> 5:  3  2 14 NA     x  # Option 3  dplyr::left_join(x            = x1,                   y            = y1,                   relationship = \"many-to-one\")  #> Joining with `by = join_by(id)` #>    id  t  x  y #> 1:  1  1 11 11 #> 2:  1  2 12 11 #> 3:  2  1 13 15 #> 4:  3  2 14 NA #> 5: NA NA 15 NA"},{"path":[]},{"path":"/articles/dplyr-joins.html","id":"left-join","dir":"Articles","previous_headings":"Some examples","what":"1. Left join","title":"dplyr-joins","text":"ℹ️ Left joins return output table rows x, .e., left table, matching rows y, .e., right table. Example usage joyn’s additional options: Updating NAs left table Using update_NAs argument joyn can update values NA t variable left table actual values matching column t right one Specifying variables keep right table join","code":"# Data tables to be joined   df1 <- data.frame(id = c(1L, 1L, 2L, 3L, NA_integer_, NA_integer_),                   t  = c(1L, 2L, 1L, 2L, NA_integer_, 4L),                   x  = 11:16)  df2 <- data.frame(id = c(1,2, 4, NA_integer_, 8),                   y  = c(11L, 15L, 16, 17L, 18L),                   t  = c(13:17)) left_join(x            = df1,            y            = df2,           relationship = \"many-to-one\",            by           = \"id\",           update_NAs   = TRUE) #>  #> ── JOYn Report ── #>  #>         .joyn n percent #> 1: NA updated 1   16.7% #> 2:          x 1   16.7% #> 3:      x & y 4   66.7% #> 4:      total 6    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ℹ ❯ Joyn's report available in variable .joyn #> ℹ ❯ Removing key variables id from id, y, and t #> ● Timing: The full joyn is executed in 9.6e-05 seconds #> ● Timing: the entire joyn function, including checks, is executed in 0.039492 #> seconds #>   id t.x  x  y t.y      .joyn #> 5 NA  16 15 17  16 NA updated #> 6 NA   4 16 17  16      x & y #> 1  1   1 11 11  13      x & y #> 2  1   2 12 11  13      x & y #> 3  2   1 13 15  14      x & y #> 4  3   2 14 NA  NA          x left_join(x              = df1,            y              = df2,           relationship   = \"many-to-one\",            by             = \"id\",            y_vars_to_keep = \"y\") #>  #> ── JOYn Report ── #>  #>    .joyn n percent #> 1:     x 1   16.7% #> 2: x & y 5   83.3% #> 3: total 6    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ℹ ❯ Joyn's report available in variable .joyn #> ● Timing: The full joyn is executed in 7.7e-05 seconds #> ● Timing: the entire joyn function, including checks, is executed in 0.024655 #> seconds #>   id  t  x  y .joyn #> 5 NA NA 15 17 x & y #> 6 NA  4 16 17 x & y #> 1  1  1 11 11 x & y #> 2  1  2 12 11 x & y #> 3  2  1 13 15 x & y #> 4  3  2 14 NA     x"},{"path":"/articles/dplyr-joins.html","id":"right-join","dir":"Articles","previous_headings":"Some examples","what":"2. Right join","title":"dplyr-joins","text":"ℹ️ Right joins return output table matching rows x, .e., left table, rows y, .e., right table. Example usage joyn’s additional options: Specifying name reporting variable Updating values common variables setting update_values = TRUE, values x (NAs ) updated actual values variables y name ones x. can see status update reporting variable.","code":"right_join(x            = df1,            y            = df2,           relationship = \"many-to-one\",            by           = \"id\",           reportvar    = \"right.joyn\") #>  #> ── JOYn Report ── #>  #>    right.joyn n percent #> 1:      x & y 5   71.4% #> 2:          y 2   28.6% #> 3:      total 7    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ℹ ❯ Joyn's report available in variable right.joyn #> ℹ ❯ Removing key variables id from id, y, and t #> ● Timing: The full joyn is executed in 7.9e-05 seconds #> ● Timing: the entire joyn function, including checks, is executed in 0.031517 #> seconds #>   id t.x  x  y t.y right.joyn #> 4 NA  NA 15 17  16      x & y #> 5 NA   4 16 17  16      x & y #> 1  1   1 11 11  13      x & y #> 2  1   2 12 11  13      x & y #> 3  2   1 13 15  14      x & y #> 6  4  NA NA 16  15          y #> 7  8  NA NA 18  17          y right_join(x            = df1,             y            = df2,            relationship = \"many-to-one\",             by           = \"id\",            reportvar    = \"right.joyn\") #>  #> ── JOYn Report ── #>  #>    right.joyn n percent #> 1:      x & y 5   71.4% #> 2:          y 2   28.6% #> 3:      total 7    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ℹ ❯ Joyn's report available in variable right.joyn #> ℹ ❯ Removing key variables id from id, y, and t #> ● Timing: The full joyn is executed in 7.6e-05 seconds #> ● Timing: the entire joyn function, including checks, is executed in 0.03222 #> seconds #>   id t.x  x  y t.y right.joyn #> 4 NA  NA 15 17  16      x & y #> 5 NA   4 16 17  16      x & y #> 1  1   1 11 11  13      x & y #> 2  1   2 12 11  13      x & y #> 3  2   1 13 15  14      x & y #> 6  4  NA NA 16  15          y #> 7  8  NA NA 18  17          y"},{"path":"/articles/dplyr-joins.html","id":"full-join","dir":"Articles","previous_headings":"Some examples","what":"3. Full join","title":"dplyr-joins","text":"ℹ️ Full joins return output table rows, matching non matching rows x, .e., left table, y, .e., right table.","code":"full_join(x = x1,            y = y1,            relationship = \"many-to-one\",            keep = TRUE) #>  #> ── JOYn Report ── #>  #>    .joyn n percent #> 1:     x 2   33.3% #> 2: x & y 3     50% #> 3:     y 1   16.7% #> 4: total 6    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ℹ ❯ Joyn's report available in variable .joyn #> ℹ ❯ Removing key variables id from id.y, id, and y #> ● Timing: The full joyn is executed in 9.6e-05 seconds #> ● Timing: the entire joyn function, including checks, is executed in 0.034962 #> seconds #>    id  t  x id.y  y .joyn #> 1: NA NA 15   NA NA     x #> 2:  1  1 11    1 11 x & y #> 3:  1  2 12    1 11 x & y #> 4:  2  1 13    2 15 x & y #> 5:  3  2 14   NA NA     x #> 6:  4 NA NA    4 16     y"},{"path":"/articles/dplyr-joins.html","id":"inner-join","dir":"Articles","previous_headings":"Some examples","what":"4. Inner join","title":"dplyr-joins","text":"ℹ️ Inner joins return output table rows match x, .e., left table, y, .e., right table. Simple inner join","code":"inner_join(x            = df1,             y             = df2,            relationship  = \"many-to-one\",             by            = \"id\") #>  #> ── JOYn Report ── #>  #>    .joyn n percent #> 1: x & y 5    100% #> 2: total 5    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ℹ ❯ Joyn's report available in variable .joyn #> ℹ ❯ Removing key variables id from id, y, and t #> ● Timing: The full joyn is executed in 7.8e-05 seconds #> ● Timing: the entire joyn function, including checks, is executed in 0.03154 #> seconds #>   id t.x  x  y t.y .joyn #> 4 NA  NA 15 17  16 x & y #> 5 NA   4 16 17  16 x & y #> 1  1   1 11 11  13 x & y #> 2  1   2 12 11  13 x & y #> 3  2   1 13 15  14 x & y"},{"path":"/articles/general-use.html","id":"the-basics","dir":"Articles","previous_headings":"","what":"The basics","title":"General use","text":"Notice joyn::merge masks base::merge, ideal. Also, loading joyn tables lazy-loaded memory, x1, x2, x3, x4, y1, y2, y3, y4.","code":"library(joyn) #>  #> Attaching package: 'joyn' #> The following object is masked from 'package:base': #>  #>     merge library(data.table) x1 = data.table(id = c(1L, 1L, 2L, 3L, NA_integer_),                 t  = c(1L, 2L, 1L, 2L, NA_integer_),                 x  = 11:15)  y1 = data.table(id = c(1,2, 4),                 y  = c(11L, 15L, 16))   x2 = data.table(id = c(1, 4, 2, 3, NA),                 t  = c(1L, 2L, 1L, 2L, NA_integer_),                 x  = c(16, 12, NA, NA, 15))   y2 = data.table(id = c(1, 2, 5, 6, 3),                 yd = c(1, 2, 5, 6, 3),                 y  = c(11L, 15L, 20L, 13L, 10L),                 x  = c(16:20))   y3 <- data.table(id = c(\"c\",\"b\", \"c\", \"a\"),                  y  = c(11L, 15L, 18L, 20L))  x3 <- data.table(id=c(\"c\",\"b\", \"d\"),                  v=8:10,                  foo=c(4,2, 7))  x4 = data.table(id1 = c(1, 1, 2, 3, 3),                 id2 = c(1, 1, 2, 3, 4),                 t   = c(1L, 2L, 1L, 2L, NA_integer_),                 x   = c(16, 12, NA, NA, 15))   y4 = data.table(id  = c(1, 2, 5, 6, 3),                 id2 = c(1, 1, 2, 3, 4),                 y   = c(11L, 15L, 20L, 13L, 10L),                 x   = c(16:20))"},{"path":"/articles/general-use.html","id":"summary-table","dir":"Articles","previous_headings":"The basics","what":"Summary table","title":"General use","text":"can see examples default joyn displays small summary table. can use reporting format report variables, setting argument reporttype numeric, similar Stata’s output.","code":"# Natural join. i.e., using as key all the variables that appear in both tables. # without display the resulting table. merge(x1, y1) #> > removing key variables `id` from yvars #>  #> -- JOYn Report -- #>  #>    report n percent #> 1:      x 2   33.3% #> 2:  x & y 3     50% #> 3:      y 1   16.7% #> 4:  total 6    100% #> ---------------------------------------------------------- End of JOYn report -- #>    id  t  x  y report #> 1:  1  1 11 11  x & y #> 2:  1  2 12 11  x & y #> 3:  2  1 13 15  x & y #> 4:  3  2 14 NA      x #> 5:  4 NA NA 16      y #> 6: NA NA 15 NA      x"},{"path":"/articles/general-use.html","id":"key-variables","dir":"Articles","previous_headings":"The basics","what":"Key variables","title":"General use","text":"Since object returned data.table, display results console concatenating pair squared brackets end call. merge(x1, y1)[] instead merge(x1, y1). key variables different names tables, can create equivalency element vector.","code":"# Natural join.  display the results. merge(x1, y1)[] #> > removing key variables `id` from yvars #>  #> -- JOYn Report -- #>  #>    report n percent #> 1:      x 2   33.3% #> 2:  x & y 3     50% #> 3:      y 1   16.7% #> 4:  total 6    100% #> ---------------------------------------------------------- End of JOYn report -- #>    id  t  x  y report #> 1:  1  1 11 11  x & y #> 2:  1  2 12 11  x & y #> 3:  2  1 13 15  x & y #> 4:  3  2 14 NA      x #> 5:  4 NA NA 16      y #> 6: NA NA 15 NA      x  # Making explicit the key variables (strongly suggested) merge(x1, y1, by = \"id\")[] #> > removing key variables `id` from yvars #> -- JOYn Report -- #>  #>    report n percent #> 1:      x 2   33.3% #> 2:  x & y 3     50% #> 3:      y 1   16.7% #> 4:  total 6    100% #> ---------------------------------------------------------- End of JOYn report -- #>    id  t  x  y report #> 1:  1  1 11 11  x & y #> 2:  1  2 12 11  x & y #> 3:  2  1 13 15  x & y #> 4:  3  2 14 NA      x #> 5:  4 NA NA 16      y #> 6: NA NA 15 NA      x # joining by id1 in x and id in y merge(x4, y4, by = c(\"id1 = id\")) #> > removing key variables `keyby1` from yvars #> i variables `id2` and `x` in table y are ignored because arguments `update_NAs` #> and `update_values` are FALSE. #>  #> -- JOYn Report -- #>  #>    report n percent #> 1:  x & y 5   71.4% #> 2:      y 2   28.6% #> 3:  total 7    100% #> ---------------------------------------------------------- End of JOYn report -- #>    id1 id2  t  x  y report #> 1:   1   1  1 16 11  x & y #> 2:   1   1  2 12 11  x & y #> 3:   2   2  1 NA 15  x & y #> 4:   3   3  2 NA 10  x & y #> 5:   3   4 NA 15 10  x & y #> 6:   5  NA NA NA 20      y #> 7:   6  NA NA NA 13      y  # joining by id1 in x and id in y, and id2  in both merge(x4, y4, by = c(\"id1 = id\", \"id2\")) #> > removing key variables `keyby1` and `id2` from yvars #> i variable `x` in table y is ignored because arguments `update_NAs` and #> `update_values` are FALSE. #>  #> -- JOYn Report -- #>  #>    report n percent #> 1:      x 2     25% #> 2:  x & y 3   37.5% #> 3:      y 3   37.5% #> 4:  total 8    100% #> ---------------------------------------------------------- End of JOYn report -- #>    id1 id2  t  x  y report #> 1:   1   1  1 16 11  x & y #> 2:   1   1  2 12 11  x & y #> 3:   2   2  1 NA NA      x #> 4:   2   1 NA NA 15      y #> 5:   3   3  2 NA NA      x #> 6:   3   4 NA 15 10  x & y #> 7:   5   2 NA NA 20      y #> 8:   6   3 NA NA 13      y"},{"path":"/articles/general-use.html","id":"match-type","dir":"Articles","previous_headings":"","what":"Match type","title":"General use","text":"Match type refers correspondence exists observations joining tables. Following Stata’s convention, four different match types, one--one (1:1) , one--many (1:m), many--one (m:1), many--many (m:m) joins. default m:m, following general R’s practice, use highly discouraged. recommend always specify match type joining tables ensure output correct. Indeed, don’t care match types don’t think necessary use particular needs, might fine without joyn. Using wording Stata manual 1:1: specifies one--one match merge. variables specified uniquely identify single observations table. 1:m m:1: specify one--many many--one match merges, respectively. means tables observations uniquely identify variables , table many (two ) observations identify variables . m:m refers many--many joins. variables uniquely identify observations either table. Matching performed combining observations equal values ; within matching values, first observation master (.e. left x) table matched first matching observation using (.e. right y) table; second, second; . unequal number observations within group, last observation shorter group used repeatedly match subsequent observations longer group. Suppose think data uniquely identified variable id, . used match_type = \"1:1\" get error, letting know something right.","code":"# Merging correctly but getting error because something is not right in the data merge(x3, y3, by = \"id\", match_type = \"1:1\") #> x table y is not uniquely identified by `id` #> Error: match type inconsistency #> i you could use `return_report = TRUE` in `joyn::is_id()` #>     to see where the problem is  # Merging wrongly but getting NO errors because  you did not use match_type merge(x3, y3, by = \"id\") #> > removing key variables `id` from yvars #>  #> -- JOYn Report -- #>  #>    report n percent #> 1:      x 1     20% #> 2:  x & y 3     60% #> 3:      y 1     20% #> 4:  total 5    100% #> ---------------------------------------------------------- End of JOYn report -- #>    id  v foo  y report #> 1:  a NA  NA 20      y #> 2:  b  9   2 15  x & y #> 3:  c  8   4 11  x & y #> 4:  c  8   4 18  x & y #> 5:  d 10   7 NA      x"},{"path":"/articles/general-use.html","id":"join-type","dir":"Articles","previous_headings":"","what":"Join type","title":"General use","text":"Join type refers observations kept join. avoid confusion argument match_type, decided name argument join_type keep. end, want specify observations want keep. argument plays role mimicking behavior dplyr’s functions left_join, right_join, inner_join, full_join, default. keep = \"full\", default, keeps observations x y, regardless whether match . keep = \"left\" keep = \"master\" keeps observations x, regardless whether match y. keep = \"right\" keep = \"using\" keeps observations y, regardless whether match x. keep = \"inner\" keeps observations match tables.","code":"# Full merge merge(x1, y1) #> > removing key variables `id` from yvars #>  #> -- JOYn Report -- #>  #>    report n percent #> 1:      x 2   33.3% #> 2:  x & y 3     50% #> 3:      y 1   16.7% #> 4:  total 6    100% #> ---------------------------------------------------------- End of JOYn report -- #>    id  t  x  y report #> 1:  1  1 11 11  x & y #> 2:  1  2 12 11  x & y #> 3:  2  1 13 15  x & y #> 4:  3  2 14 NA      x #> 5:  4 NA NA 16      y #> 6: NA NA 15 NA      x # keep obs in x merge(x1, y1, keep = \"left\") #> > removing key variables `id` from yvars #>  #> -- JOYn Report -- #>  #>    report n percent #> 1:      x 2     40% #> 2:  x & y 3     60% #> 3:  total 5    100% #> ---------------------------------------------------------- End of JOYn report -- #>    id  t  x  y report #> 1:  1  1 11 11  x & y #> 2:  1  2 12 11  x & y #> 3:  2  1 13 15  x & y #> 4:  3  2 14 NA      x #> 5: NA NA 15 NA      x # keep obs in y merge(x1, y1, keep = \"right\") #> > removing key variables `id` from yvars #>  #> -- JOYn Report -- #>  #>    report n percent #> 1:  x & y 3     75% #> 2:      y 1     25% #> 3:  total 4    100% #> ---------------------------------------------------------- End of JOYn report -- #>    id  t  x  y report #> 1:  1  1 11 11  x & y #> 2:  1  2 12 11  x & y #> 3:  2  1 13 15  x & y #> 4:  4 NA NA 16      y # keep matching obs in both tables merge(x1, y1, keep = \"inner\") #> > removing key variables `id` from yvars #>  #> -- JOYn Report -- #>  #>    report n percent #> 1:  x & y 3    100% #> 2:  total 3    100% #> ---------------------------------------------------------- End of JOYn report -- #>    id t  x  y report #> 1:  1 1 11 11  x & y #> 2:  1 2 12 11  x & y #> 3:  2 1 13 15  x & y"},{"path":"/articles/main-functionalities.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Main functionalities","text":"📌 joyn, two major sets tools join data tables: primary function joyn() Dplyr-like join functions: left_join(), right_join(), full_join(), inner_join() vignette explore main function joyn(). can read dplyr-joins “dplyr-joins” article instead.","code":""},{"path":"/articles/main-functionalities.html","id":"general-use","dir":"Articles","previous_headings":"","what":"General use","title":"Main functionalities","text":"","code":"library(joyn) library(data.table)  x1 <- data.table(id = c(1L, 1L, 2L, 3L, NA_integer_),                  t  = c(1L, 2L, 1L, 2L, NA_integer_),                  x  = 11:15)  y1 <- data.table(id = c(1,2, 4),                  y  = c(11L, 15L, 16))   x2 <- data.table(id = c(1, 4, 2, 3, NA),                  t  = c(1L, 2L, 1L, 2L, NA_integer_),                  x  = c(16, 12, NA, NA, 15))   y2 <- data.table(id = c(1, 2, 5, 6, 3),                  yd = c(1, 2, 5, 6, 3),                  y  = c(11L, 15L, 20L, 13L, 10L),                  x  = c(16:20))  x3 <- data.table(id  = c(\"c\",\"b\", \"d\", \"d\"),                  v   = 8:11,                  foo = c(4,2, 7, 3))  y3 <- data.table(id = c(\"c\",\"b\", \"c\", \"a\"),                  y  = c(11L, 15L, 18L, 20L))   x4 <- data.table(id1 = c(1, 1, 2, 3, 3),                  id2 = c(1, 1, 2, 3, 4),                  t   = c(1L, 2L, 1L, 2L, NA_integer_),                  x   = c(16, 12, NA, NA, 15))  y4 <- data.table(id  = c(1, 2, 5, 6, 3),                  id2 = c(1, 1, 2, 3, 4),                  y   = c(11L, 15L, 20L, 13L, 10L),                  x   = c(16:20))   x5 <- data.table(id      = c(1, 4, 2, 3, NA),                  t       = c(1L, 2L, 1L, 2L, NA),                  country = c(16, 12, 3, NA, 15))    y5 <- data.table(id      = c(1, 2, 2, 6, 3),                  gdp     = c(11L, 15L, 20L, 13L, 10L),                  country = 16:20)"},{"path":"/articles/main-functionalities.html","id":"the-basics","dir":"Articles","previous_headings":"General use","what":"The basics","title":"Main functionalities","text":"Let’s suppose want join two tables x1 y1. output table result full join -joyn always executes default. means returning table retains matching non matching rows x1 y1. Notice resulting table also contains additional variable called .joyn, reporting variable. (Read ⬇️)","code":"# Calling joyn() to join x1 and y1  joyn(x = x1,      y = y1,       match_type = \"m:1\" ) #Note RT: remove this argument once fixing the default value #>    id  t  x  y .joyn #> 1: NA NA 15 NA     x #> 2:  1  1 11 11 x & y #> 3:  1  2 12 11 x & y #> 4:  2  1 13 15 x & y #> 5:  3  2 14 NA     x #> 6:  4 NA NA 16     y"},{"path":"/articles/main-functionalities.html","id":"reporting-variable","dir":"Articles","previous_headings":"General use > The basics","what":"Reporting variable","title":"Main functionalities","text":"particular feature joyn includes reportvar returning table, informs status join. can modify name format reporting variable follows: Name: default reportvar = \".joyn\", can modify reportvar = \"myname\" specifying name want assign Format: default reporttype = \"character\" , can also set numeric using reporttype = \"numeric\" can see difference two types table below1:","code":""},{"path":"/articles/main-functionalities.html","id":"key-variables","dir":"Articles","previous_headings":"General use > The basics","what":"Key variables","title":"Main functionalities","text":"performing join, might want specify variable(s) joyn join . default joyn consider variable(s) common x y key(s) join, suggestion make keys explicit - .e., specifying /argument don’t want join variables common x y, can alternately use equivalency element vector. specification allows join different variables x y. Also, notice joyn sort resulting table key variables . sort = TRUE default.","code":"# Join with one variable in common  joyn(x = x1,      y = y1,       by = \"id\",       match_type = \"m:1\") #>    id  t  x  y .joyn #> 1: NA NA 15 NA     x #> 2:  1  1 11 11 x & y #> 3:  1  2 12 11 x & y #> 4:  2  1 13 15 x & y #> 5:  3  2 14 NA     x #> 6:  4 NA NA 16     y joyn(x = x4,       y = y4,       by = c(\"id1 = id\", \"id2\"),       match_type = \"m:m\") #>    id1 id2  t  x  y .joyn #> 1:   1   1  1 16 11 x & y #> 2:   1   1  2 12 11 x & y #> 3:   2   2  1 NA NA     x #> 4:   2   1 NA NA 15     y #> 5:   3   3  2 NA NA     x #> 6:   3   4 NA 15 10 x & y #> 7:   5   2 NA NA 20     y #> 8:   6   3 NA NA 13     y"},{"path":"/articles/main-functionalities.html","id":"match-type","dir":"Articles","previous_headings":"General use","what":"Match type","title":"Main functionalities","text":"💡Match type refers relationship exists observations joining tables. possibility perform joins based match type one value added using joyn. Following Stata’s convention, can four different match types: 1:1 (one one): default2, variables specified variables uniquely identify single observations table –> observation left table unique match right table viceversa 1:m (one many): left table uniquely identified byvariables –> observation var left table can multiple matches var right table m:1 (many one): right table uniquely identified byvar -> observation left table can one match right table observations right table might multiple matches left table m:m (many many): variables uniquely identify observations either table –> tables can multiple matches observation recommend always specify match type joining tables ensure output correct. However, unsure/wrong relationships observations tables, joyn let know something right. Suppose think data uniquely identified variable id, . setting match_type = \"1:1\" get error, informing match type expected. instead don’t care match types don’t think necessary use particular needs, might fine without joyn.","code":"# Many to one match type joyn(x = x1,      y = y1,      by = \"id\",      match_type = \"m:1\") #>    id  t  x  y .joyn #> 1: NA NA 15 NA     x #> 2:  1  1 11 11 x & y #> 3:  1  2 12 11 x & y #> 4:  2  1 13 15 x & y #> 5:  3  2 14 NA     x #> 6:  4 NA NA 16     y  # Many to many match type joyn(x = x3,      y = y3,      by = \"id\",      match_type = \"m:m\") #>    id  v foo  y .joyn #> 1:  a NA  NA 20     y #> 2:  b  9   2 15 x & y #> 3:  c  8   4 11 x & y #> 4:  c  8   4 18 x & y #> 5:  d 10   7 NA     x #> 6:  d 11   3 NA     x  # One to one match type - the default joyn(x = x2,      y = y2,      by = \"id\",      match_type = \"1:1\") #>    id  t  x yd  y .joyn #> 1: NA NA 15 NA NA     x #> 2:  1  1 16  1 11 x & y #> 3:  2  1 NA  2 15 x & y #> 4:  3  2 NA  3 10 x & y #> 5:  4  2 12 NA NA     x #> 6:  5 NA NA  5 20     y #> 7:  6 NA NA  6 13     y  # Same join as:  joyn(x = x2,      y = y2,      by = \"id\") #>    id  t  x yd  y .joyn #> 1: NA NA 15 NA NA     x #> 2:  1  1 16  1 11 x & y #> 3:  2  1 NA  2 15 x & y #> 4:  3  2 NA  3 10 x & y #> 5:  4  2 12 NA NA     x #> 6:  5 NA NA  5 20     y #> 7:  6 NA NA  6 13     y   # One to many match type  joyn(x = x5,      y = y5,      by = \"id\",      match_type = \"1:m\") #>    id  t country gdp .joyn #> 1: NA NA      15  NA     x #> 2:  1  1      16  11 x & y #> 3:  2  1       3  15 x & y #> 4:  2  1       3  20 x & y #> 5:  3  2      NA  10 x & y #> 6:  4  2      12  NA     x #> 7:  6 NA      NA  13     y # Merging correctly but getting error because something is not right in the data joyn(x3, y3, by = \"id\", match_type = \"1:1\") #> ✖ Error: table x is not uniquely identified by id #> ✖ Error: table y is not uniquely identified by id #> Error in `check_match_type()`: #> ! match type inconsistency #> ℹ you could use `return_report = TRUE` in `joyn::is_id()` to see where the #>   problem is  # Merging wrongly but getting NO errors because you did not use match_type joyn(x3, y3, by = \"id\") #> ✖ Error: table x is not uniquely identified by id #> ✖ Error: table y is not uniquely identified by id #> Error in `check_match_type()`: #> ! match type inconsistency #> ℹ you could use `return_report = TRUE` in `joyn::is_id()` to see where the #>   problem is"},{"path":"/articles/main-functionalities.html","id":"type-of-join","dir":"Articles","previous_headings":"General use","what":"Type of join","title":"Main functionalities","text":"Join type determines observations kept join. joyn() allows choose type join execute via keep argument. argument called keep rather join_type avoid confusion argument match_type, order reflect specifying end observations want keep. argument plays role allowing joyn() mimic behavior dplyr’s functions left_join, right_join, inner_join, full_join, default. keep can four types: keep = \"full\": default, keeps observations x y, regardless whether match . keep = \"left\" keep = \"master\" : keeps observations x, matching non, observations y match x keep = \"right\" keep = \"using\" keeps observations y, matching non, observations x match y keep = \"inner\" keeps observations match tables.","code":"# Full join   joyn(x          = x1,       y          = y1,       match_type = \"m:m\") #>    id  t  x  y .joyn #> 1: NA NA 15 NA     x #> 2:  1  1 11 11 x & y #> 3:  1  2 12 11 x & y #> 4:  2  1 13 15 x & y #> 5:  3  2 14 NA     x #> 6:  4 NA NA 16     y # keep obs in x  joyn(x          = x1,       y          = y1,       keep       = \"left\",       match_type = \"m:m\") #>    id  t  x  y .joyn #> 1: NA NA 15 NA     x #> 2:  1  1 11 11 x & y #> 3:  1  2 12 11 x & y #> 4:  2  1 13 15 x & y #> 5:  3  2 14 NA     x # keep obs in y  joyn(x          = x1,       y          = y1,      keep       = \"right\",       match_type = \"m:m\") #>    id  t  x  y .joyn #> 1:  1  1 11 11 x & y #> 2:  1  2 12 11 x & y #> 3:  2  1 13 15 x & y #> 4:  4 NA NA 16     y # keep matching obs in both tables  joyn(x1, y1, keep = \"inner\", match_type = \"m:m\") #>    id t  x  y .joyn #> 1:  1 1 11 11 x & y #> 2:  1 2 12 11 x & y #> 3:  2 1 13 15 x & y"},{"path":"/articles/main-functionalities.html","id":"an-important-feature-joyn-report-and-info-display","dir":"Articles","previous_headings":"","what":"An important feature: JOYn report and info display","title":"Main functionalities","text":"Recall joyn intended informative status quality merging. 📊 JOYn report default, joyn returns JOYn report , .e., summary table merging. includes reporting variable, number rows come x, number rows come y common x y. info also shown percentage form percent column. 📝 Displaying messages One value added joyn produces number messages intended inform status join. display messages controlled argument verbose, allows show (verbose = TRUE) silent (verbose = FALSE) messages. explore messages joyn, please refer “Messages” article.","code":"joyn(x = x3,       y = y3,       by = \"id\",       match_type = \"m:m\",      verbose = TRUE) #>  #> ── JOYn Report ── #>  #>    .joyn n percent #> 1:     x 2   33.3% #> 2: x & y 3     50% #> 3:     y 1   16.7% #> 4: total 6    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ℹ ❯ Joyn's report available in variable .joyn #> ℹ ❯ Removing key variables id from id and y #> ● Timing: The full joyn is executed in 0.001727 seconds #> ● Timing: the entire joyn function, including checks, is executed in 0.033326 #> seconds #>    id  v foo  y .joyn #> 1:  a NA  NA 20     y #> 2:  b  9   2 15 x & y #> 3:  c  8   4 11 x & y #> 4:  c  8   4 18 x & y #> 5:  d 10   7 NA     x #> 6:  d 11   3 NA     x"},{"path":"/articles/messages.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Messages","text":"Joyn messages can 4 different types: Info Timing Warning Error","code":"# Setup  library(joyn) library(data.table) # Checking available types of messages msgs_types = joyn:::type_choices() print(msgs_types) #> [1] \"info\"   \"note\"   \"warn\"   \"timing\" \"err\""},{"path":"/articles/messages.html","id":"information-messages-ℹ","dir":"Articles","previous_headings":"Overview","what":"Information messages ℹ","title":"Messages","text":"Info messages intended inform various aspects join data tables involved, can see examples . Recall one additional features joyn returns reporting variable status join. Examples regard include info messages tell variable available joyn report, reporting variable returned instead. Recall one additional features joyn returns reporting variable status join. Examples regard include info messages tell variable available joyn report, reporting variable returned instead. Also, info message might let know name want assign reporting variable already present returning table, changed another one. Furthermore, info messages help keep track variables y kept merging, example notifying y variables specified keep removed part variables.","code":"# Example dataframes  x1 = data.table(id = c(1L, 1L, 2L, 3L, NA_integer_),                 t  = c(1L, 2L, 1L, 2L, NA_integer_),                 x  = 11:15)  y1 = data.table(id = c(1,2, 4),                 y  = c(11L, 15L, 16))   x2 = data.table(id = c(1, 4, 2, 3, NA),                 t  = c(1L, 2L, 1L, 2L, NA_integer_),                 x  = c(16, 12, NA, NA, 15))   y2 = data.table(id = c(1, 2, 5, 6, 3),                 yd = c(1, 2, 5, 6, 3),                 y  = c(11L, 15L, 20L, 13L, 10L),                 x  = c(16:20))  x3 = data.table(id1 = c(1, 1, 2, 3, 3),                 id2 = c(1, 1, 2, 3, 4),                 t   = c(1L, 2L, 1L, 2L, NA_integer_),                 x   = c(16, 12, NA, NA, 15))   y3 = data.table(id3  = c(1, 2, 5, 6, 3),                 id4 = c(1, 1, 2, 3, 4),                 y   = c(11L, 15L, 20L, 13L, 10L),                 z   = c(16:20))    # ------------------- Showing which var contains joyn report -------------------  # Joining x2 and y2 joyn(x              = x2,      y              = y2,      by             = \"id\",       y_vars_to_keep = FALSE) #>  #> ── JOYn Report ── #>  #>    .joyn n percent #> 1:     x 2   28.6% #> 2: x & y 3   42.9% #> 3:     y 2   28.6% #> 4: total 7    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ℹ ❯ Joyn's report available in variable .joyn #> ● Timing: The full joyn is executed in 0.000745 seconds #> ● Timing: the entire joyn function, including checks, is executed in 0.051049 #> seconds #>    id  t  x .joyn #> 1: NA NA 15     x #> 2:  1  1 16 x & y #> 3:  2  1 NA x & y #> 4:  3  2 NA x & y #> 5:  4  2 12     x #> 6:  5 NA NA     y #> 7:  6 NA NA     y  # Printing the info message joyn_msg(type = \"info\") #> ℹ ❯ Joyn's report available in variable .joyn  # ---------------- Info about change in reporting variable name ---------------- joyn(x              = x2,      y              = y2,      by             = \"id\",       reportvar      = \"x\",      y_vars_to_keep = FALSE) #>  #> ── JOYn Report ── #>  #>      x.1 n percent #> 1:     x 2   28.6% #> 2: x & y 3   42.9% #> 3:     y 2   28.6% #> 4: total 7    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ℹ ❯ Joyn's report available in variable x #> ● Timing: The full joyn is executed in 7.9e-05 seconds #> ℹ Note: reportvar x is already part of the resulting table. It will be changed #> to x.1 #> ● Timing: the entire joyn function, including checks, is executed in 0.049439 #> seconds #>    id  t  x   x.1 #> 1: NA NA 15     x #> 2:  1  1 16 x & y #> 3:  2  1 NA x & y #> 4:  3  2 NA x & y #> 5:  4  2 12     x #> 6:  5 NA NA     y #> 7:  6 NA NA     y  joyn_msg(type = \"info\") #> ℹ ❯ Joyn's report available in variable x #> ℹ Note: reportvar x is already part of the resulting table. It will be changed #> to x.1  # ------------- Informing that reporting variable is not returned ------------- joyn(x              = x2,      y              = y2,      by             = \"id\",       reportvar      = FALSE,      y_vars_to_keep = FALSE) #>  #> ── JOYn Report ── #>  #>    .joyn n percent #> 1:     x 2   28.6% #> 2: x & y 3   42.9% #> 3:     y 2   28.6% #> 4: total 7    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ℹ Note: Reporting variable is not returned #> ● Timing: The full joyn is executed in 7.5e-05 seconds #> ● Timing: the entire joyn function, including checks, is executed in 0.029791 #> seconds #>    id  t  x #> 1: NA NA 15 #> 2:  1  1 16 #> 3:  2  1 NA #> 4:  3  2 NA #> 5:  4  2 12 #> 6:  5 NA NA #> 7:  6 NA NA  joyn_msg(type = \"info\") #> ℹ Note: Reporting variable is not returned joyn(x              = x2,      y              = y2,      by             = \"id\",       y_vars_to_keep = TRUE) #>  #> ── JOYn Report ── #>  #>    .joyn n percent #> 1:     x 2   28.6% #> 2: x & y 3   42.9% #> 3:     y 2   28.6% #> 4: total 7    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ℹ ❯ Joyn's report available in variable .joyn #> ℹ ❯ Removing key variables id from id, yd, y, and x #> ● Timing: The full joyn is executed in 8e-05 seconds #> ● Timing: the entire joyn function, including checks, is executed in 0.035048 #> seconds #>    id  t  x yd  y .joyn #> 1: NA NA 15 NA NA     x #> 2:  1  1 16  1 11 x & y #> 3:  2  1 NA  2 15 x & y #> 4:  3  2 NA  3 10 x & y #> 5:  4  2 12 NA NA     x #> 6:  5 NA NA  5 20     y #> 7:  6 NA NA  6 13     y  joyn_msg(type = \"info\") #> ℹ ❯ Joyn's report available in variable .joyn #> ℹ ❯ Removing key variables id from id, yd, y, and x"},{"path":"/articles/messages.html","id":"timing-messages","dir":"Articles","previous_headings":"Overview","what":"Timing messages 🔵","title":"Messages","text":"Timing messages report many seconds join executed, including time spent perform checks. performing join, joyn keeps track time spent execution. displayed timing messages, report elapsed time measured seconds. visualizing examples, important remind feature joyn executes join two data tables. Specifically, joyn always first executes full join data tables - includes matching non matching rows resulting table. , filters rows depending specific type join user wants execute. example, user sets keep = \"right\", joyn filter table resulting full join return user data table retaining rows right table matching rows left table. addition, note since joyn performs number checks throughout execution (e.g., checking specified key merge valid, match type consistency), time spent checks also included reported time. result, timing messages enable aware : Time spent execute full join Time spent execute entire joyn function, including checks","code":"# --------------------------- Example with full join ---------------------------  joyn(x          = x1,       y          = y1,       match_type = \"m:1\") #>  #> ── JOYn Report ── #>  #>    .joyn n percent #> 1:     x 2   33.3% #> 2: x & y 3     50% #> 3:     y 1   16.7% #> 4: total 6    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ℹ ❯ Joyn's report available in variable .joyn #> ℹ ❯ Removing key variables id from id and y #> ● Timing: The full joyn is executed in 7.2e-05 seconds #> ● Timing: the entire joyn function, including checks, is executed in 0.030674 #> seconds #>    id  t  x  y .joyn #> 1: NA NA 15 NA     x #> 2:  1  1 11 11 x & y #> 3:  1  2 12 11 x & y #> 4:  2  1 13 15 x & y #> 5:  3  2 14 NA     x #> 6:  4 NA NA 16     y  joyn_msg(\"timing\") #> ● Timing: The full joyn is executed in 7.2e-05 seconds #> ● Timing: the entire joyn function, including checks, is executed in 0.030674 #> seconds   # --------------------------- Example with left join --------------------------- left_join(x            = x1,            y            = y1,            relationship = \"many-to-one\") #>  #> ── JOYn Report ── #>  #>    .joyn n percent #> 1:     x 2     40% #> 2: x & y 3     60% #> 3: total 5    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ℹ ❯ Joyn's report available in variable .joyn #> ℹ ❯ Removing key variables id from id and y #> ● Timing: The full joyn is executed in 7.7e-05 seconds #> ● Timing: the entire joyn function, including checks, is executed in 0.031252 #> seconds #>    id  t  x  y .joyn #> 1: NA NA 15 NA     x #> 2:  1  1 11 11 x & y #> 3:  1  2 12 11 x & y #> 4:  2  1 13 15 x & y #> 5:  3  2 14 NA     x  joyn_msg(\"timing\") #> ● Timing: The full joyn is executed in 7.7e-05 seconds #> ● Timing: the entire joyn function, including checks, is executed in 0.031252 #> seconds"},{"path":"/articles/messages.html","id":"warning-messages","dir":"Articles","previous_headings":"Overview","what":"Warning messages ⚠️","title":"Messages","text":"joyn generates warning messages alert possible problematic situation however warrant terminating execution merge. example, provide match type inconsistent data, joyn generate warning inform actual relationship alert join executed accordingly. example , x2 y2 uniquely identified key id, user choosing “one many” relationship instead. user alerted “one one” join executed instead. similar way, warning messages generated choosing match_type = \"m:m\" \"m:1\" examples warnings arise trying supply certain arguments merging functions yet supported current version joyn. Suppose executing left-join try set na_matches argument ‘never’. joyn warn currently allows na_matches = 'na'. similar message displayed keep = NULL. Given current version joyn support inequality joins, joyn warn keep = NULL make join retain keys x.","code":"# Warning that \"id\" uniquely identifies y2   joyn(x2, y2, by = \"id\", match_type = \"1:m\", verbose = TRUE) #>  #> ── JOYn Report ── #>  #>    .joyn n percent #> 1:     x 2   28.6% #> 2: x & y 3   42.9% #> 3:     y 2   28.6% #> 4: total 7    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ℹ ❯ Joyn's report available in variable .joyn #> ⚠ Warning: The keys supplied uniquely identify y therefore a 1:1 join is #> executed. #> ℹ ❯ Removing key variables id from id, yd, y, and x #> ● Timing: The full joyn is executed in 8.7e-05 seconds #> ● Timing: the entire joyn function, including checks, is executed in 0.040728 #> seconds #>    id  t  x yd  y .joyn #> 1: NA NA 15 NA NA     x #> 2:  1  1 16  1 11 x & y #> 3:  2  1 NA  2 15 x & y #> 4:  3  2 NA  3 10 x & y #> 5:  4  2 12 NA NA     x #> 6:  5 NA NA  5 20     y #> 7:  6 NA NA  6 13     y joyn_msg(\"warn\") #> ⚠ Warning: The keys supplied uniquely identify y therefore a 1:1 join is #> executed. # ------------ Warning that \"id\" uniquely identifies both x2 and y2 ------------  joyn(x2, y2, by = \"id\", match_type = \"m:m\", verbose = TRUE) #>  #> ── JOYn Report ── #>  #>    .joyn n percent #> 1:     x 2   28.6% #> 2: x & y 3   42.9% #> 3:     y 2   28.6% #> 4: total 7    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ℹ ❯ Joyn's report available in variable .joyn #> ⚠ Warning: The keys supplied uniquely identify both x and y therefore a 1:1 #> join is executed. #> ℹ ❯ Removing key variables id from id, yd, y, and x #> ● Timing: The full joyn is executed in 0.003087 seconds #> ● Timing: the entire joyn function, including checks, is executed in 0.082903 #> seconds #>    id  t  x yd  y .joyn #> 1: NA NA 15 NA NA     x #> 2:  1  1 16  1 11 x & y #> 3:  2  1 NA  2 15 x & y #> 4:  3  2 NA  3 10 x & y #> 5:  4  2 12 NA NA     x #> 6:  5 NA NA  5 20     y #> 7:  6 NA NA  6 13     y joyn_msg(\"warn\") #> ⚠ Warning: The keys supplied uniquely identify both x and y therefore a 1:1 #> join is executed.  # ------------------ Warning that \"id\" uniquely identifies x2 ------------------  joyn(x2, y2, by = \"id\", match_type = \"m:1\", verbose = TRUE) #>  #> ── JOYn Report ── #>  #>    .joyn n percent #> 1:     x 2   28.6% #> 2: x & y 3   42.9% #> 3:     y 2   28.6% #> 4: total 7    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ℹ ❯ Joyn's report available in variable .joyn #> ⚠ Warning: The keys supplied uniquely identify x therefore a 1:1 join is #> executed. #> ℹ ❯ Removing key variables id from id, yd, y, and x #> ● Timing: The full joyn is executed in 8.2e-05 seconds #> ● Timing: the entire joyn function, including checks, is executed in 0.038305 #> seconds #>    id  t  x yd  y .joyn #> 1: NA NA 15 NA NA     x #> 2:  1  1 16  1 11 x & y #> 3:  2  1 NA  2 15 x & y #> 4:  3  2 NA  3 10 x & y #> 5:  4  2 12 NA NA     x #> 6:  5 NA NA  5 20     y #> 7:  6 NA NA  6 13     y joyn_msg(\"warn\") #> ⚠ Warning: The keys supplied uniquely identify x therefore a 1:1 join is #> executed. joyn::left_join(x            = x1,                  y            = y1,                  relationship = \"many-to-one\",                  keep         = NULL,                 na_matches   = \"never\") #>  #> ── JOYn Report ── #>  #>    .joyn n percent #> 1:     x 2     40% #> 2: x & y 3     60% #> 3: total 5    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ⚠ Warning: joyn does not currently allow inequality joins, so keep = NULL will #> retain only keys in x #> ⚠ Warning: Currently, joyn allows only na_matches = 'na' #> ℹ ❯ Joyn's report available in variable .joyn #> ℹ ❯ Removing key variables id from id and y #> ● Timing: The full joyn is executed in 6.9e-05 seconds #> ● Timing: the entire joyn function, including checks, is executed in 0.036265 #> seconds #>    id  t  x  y .joyn #> 1: NA NA 15 NA     x #> 2:  1  1 11 11 x & y #> 3:  1  2 12 11 x & y #> 4:  2  1 13 15 x & y #> 5:  3  2 14 NA     x  joyn_msg(\"warn\") #> ⚠ Warning: joyn does not currently allow inequality joins, so keep = NULL will #> retain only keys in x #> ⚠ Warning: Currently, joyn allows only na_matches = 'na'"},{"path":"/articles/messages.html","id":"error-messages","dir":"Articles","previous_headings":"Overview","what":"Error messages ❌","title":"Messages","text":"Error messages act helpful notifications reasons join trying perform can’t executed. Error messages highlight went course provide clues fix issue merging can successfully executed. Sometimes error messages due wrong/missing provision inputs, example supply variables used key merge, x y common variable names. Error messages also pop provide input data table variables, duplicate variable names. Representative messages regard can visualized : Furthermore, errors messages generated choosing wrong match_type, consistent actual relationship variables used merging. joyn therefore display following message:","code":"# ----------------- Error due to input table x with no columns -----------------  x_empty = data.table()    joyn(x = x_empty,      y = y1) #> ✖ Error: Input table x has no columns. #> Error in `check_xy()`: #> ! wrong input specification  joyn_msg(\"err\") #> ✖ Error: Input table x has no columns.  # ----------------------- Error due to duplicate names  ------------------------  x_duplicates = data.table(id          = c(1L, 1L, 2L, 3L, NA_integer_),                           x           = c(1L, 2L, 1L, 2L, NA_integer_),                           x           = 11:15,                           check.names = FALSE) joyn(x = x_duplicates,      y = y1) #> ✖ Error: Table x has the following column duplicated:`x` Please rename or #> remove and try again. #> Error in `check_xy()`: #> ! wrong input specification  joyn_msg(\"err\") #> ✖ Error: Table x has the following column duplicated:`x` Please rename or #> remove and try again. joyn(x = x1, y=y1, by=\"id\", match_type = \"1:1\") #> ✖ Error: table x is not uniquely identified by id #> Error in `check_match_type()`: #> ! match type inconsistency #> ℹ you could use `return_report = TRUE` in `joyn::is_id()` to see where the #>   problem is joyn_msg(\"err\") #> ✖ Error: table x is not uniquely identified by id"},{"path":"/articles/messages.html","id":"additional-how-to-visualize-joyn-messages","dir":"Articles","previous_headings":"","what":"Additional: How to visualize joyn messages?","title":"Messages","text":"joyn stores messages joyn environment. order print , can use joyn_msg() function. type argument allows specify certain type message like visualize, , want displayed, can just set type = ''","code":"# Execute a join   joyn(x = x1,       y = y1,       match_type = \"m:1\") #>  #> ── JOYn Report ── #>  #>    .joyn n percent #> 1:     x 2   33.3% #> 2: x & y 3     50% #> 3:     y 1   16.7% #> 4: total 6    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ℹ ❯ Joyn's report available in variable .joyn #> ℹ ❯ Removing key variables id from id and y #> ● Timing: The full joyn is executed in 7.2e-05 seconds #> ● Timing: the entire joyn function, including checks, is executed in 0.037806 #> seconds #>    id  t  x  y .joyn #> 1: NA NA 15 NA     x #> 2:  1  1 11 11 x & y #> 3:  1  2 12 11 x & y #> 4:  2  1 13 15 x & y #> 5:  3  2 14 NA     x #> 6:  4 NA NA 16     y  # Print all messages stored joyn_msg(type = \"all\") #> ℹ ❯ Joyn's report available in variable .joyn #> ℹ ❯ Removing key variables id from id and y #> ● Timing: The full joyn is executed in 7.2e-05 seconds #> ● Timing: the entire joyn function, including checks, is executed in 0.037806 #> seconds  # Print info messages only  joyn_msg(type = \"info\") #> ℹ ❯ Joyn's report available in variable .joyn #> ℹ ❯ Removing key variables id from id and y"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"R.Andres Castaneda. Author, maintainer. Zander Prinsloo. Author. Rossana Tatulli. Contributor.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Castaneda R, Prinsloo Z (2024). joyn: Tool Diagnosis Tables Joins Complementary Join Features. R package version 0.1.5, https://github.com/randrescastaneda/joyn.","code":"@Manual{,   title = {joyn: Tool for Diagnosis of Tables Joins and Complementary Join Features},   author = {R.Andres Castaneda and Zander Prinsloo},   year = {2024},   note = {R package version 0.1.5},   url = {https://github.com/randrescastaneda/joyn}, }"},{"path":"/index.html","id":"joyn","dir":"","previous_headings":"","what":"Tool for Diagnosis of Tables Joins and Complementary Join Features","title":"Tool for Diagnosis of Tables Joins and Complementary Join Features","text":"joyn provides user set tools analyze quality merging (.e., joining) data frames, JOY join tables joyn. inspired command merge statistical software Stata.","code":""},{"path":"/index.html","id":"motivation","dir":"","previous_headings":"","what":"Motivation","title":"Tool for Diagnosis of Tables Joins and Complementary Join Features","text":"objective joyn make life easier joining tables. former Stata user (still work Stata much work R now), missed, now, ability assess accuracy join mergin two tables R. one single command, merge, Stata allows user perform kind equi-join. reason , default, Stata merges fully tables one user keep observation needs. importantly, Stata forces user know joining tables relate . tables one--one (1:1 ) relation, common find one--many (1:m), many--one (m:1), many--many (m:m) relations. Finally, Stata’s merge command returns default variable useful information table’s join. , following features value added joyn: joyn performs full join default (.e., resulting table observations original, joining tables). Yet, user can select “left”, “right” “inner” joins using argument keep. vain, joyn keeps columns form joining tables. Two caveats worth mentioning. tables variables name, default joyn bring variables second (.e, right, using) table first (.e., left, master) table. Yet, can one two things. First, can use arguments update_values updateNA update value variable first table ones second table. , can use argument keep_y_in_x = TRUE keep variables different name. can use argument yvars select variables want bring second table first one. joyn allows user perform one--one (1:1) , one--many (1:m), many--one (m:1), many--many (m:m) joins. default m:m, following general R’s practice, highly discouraged. Since want use joyn, recommend always specify right relationship joining tables. joyn returns reporting variable status join.","code":""},{"path":"/index.html","id":"regarding-speed-and-flexibility","dir":"","previous_headings":"","what":"Regarding speed and flexibility","title":"Tool for Diagnosis of Tables Joins and Complementary Join Features","text":"Notice joyn intended super fast joining tool. construction, lot things make slower tools . However, joyn basically wrapper around data.table’s merge.data.table() function. , lost speed joyn mainly due evaluating several conditions, creating reporting variable, present nice summary table end process. Also, keep mind joyn intended informative, displays messages inform join (can silence message joyn, including reporting table, using argument verbose = FALSE). , course, makes joyn little slower using regular data.table syntax. However, loss speed much ’re gaining lot information. main reason joyn little slower pure data.table always perform full join data way Stata . , joyn intended information verification joins tables. working project executes many (say, 1000) joins constantly merging super big data sets, recommended use data.table’s syntaz x directly. now, flexibility joyn limited basic joins, yet used useful ones. want learn different kinds joins available data.table relate dplyr, recommend start blog post.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tool for Diagnosis of Tables Joins and Complementary Join Features","text":"can install stable version joyn CRAN : development version GitHub :","code":"install.packages(\"joyn\") # install.packages(\"devtools\") devtools::install_github(\"randrescastaneda/joyn\")"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Tool for Diagnosis of Tables Joins and Complementary Join Features","text":"","code":"library(joyn) #>  #> Attaching package: 'joyn' #> The following object is masked from 'package:base': #>  #>     merge library(data.table) #> Warning: package 'data.table' was built under R version 4.3.2 x1 = data.table(id = c(1L, 1L, 2L, 3L, NA_integer_),                 t  = c(1L, 2L, 1L, 2L, NA_integer_),                 x  = 11:15)  y1 = data.table(id = c(1,2, 4),                 y  = c(11L, 15L, 16))   x2 = data.table(id = c(1, 4, 2, 3, NA),                 t  = c(1L, 2L, 1L, 2L, NA_integer_),                 x  = c(16, 12, NA, NA, 15))   y2 = data.table(id = c(1, 2, 5, 6, 3),                 yd = c(1, 2, 5, 6, 3),                 y  = c(11L, 15L, 20L, 13L, 10L),                 x  = c(16:20))  # using commong variable `id` as key. merge(x1, y1)[] #> → removing key variables `id` from yvars #>  #> ── JOYn Report ── #>  #>    report n percent #> 1:      x 2   33.3% #> 2:  x & y 3     50% #> 3:      y 1   16.7% #> 4:  total 6    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #>    id  t  x  y report #> 1:  1  1 11 11  x & y #> 2:  1  2 12 11  x & y #> 3:  2  1 13 15  x & y #> 4:  3  2 14 NA      x #> 5:  4 NA NA 16      y #> 6: NA NA 15 NA      x  # keep just those observations that match merge(x1, y1, keep = \"inner\")[] #> → removing key variables `id` from yvars #> ── JOYn Report ── #>  #>    report n percent #> 1:  x & y 3    100% #> 2:  total 3    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #>    id t  x  y report #> 1:  1 1 11 11  x & y #> 2:  1 2 12 11  x & y #> 3:  2 1 13 15  x & y  # Bad merge for not specifying by argument merge(x2, y2)[] #> → removing key variables `id` and `x` from yvars #> ── JOYn Report ── #>  #>    report n percent #> 1:      x 4   44.4% #> 2:  x & y 1   11.1% #> 3:      y 4   44.4% #> 4:  total 9    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #>    id  x  t yd  y report #> 1:  1 16  1  1 11  x & y #> 2:  2 17 NA  2 15      y #> 3:  2 NA  1 NA NA      x #> 4:  3 20 NA  3 10      y #> 5:  3 NA  2 NA NA      x #> 6:  4 12  2 NA NA      x #> 7:  5 18 NA  5 20      y #> 8:  6 19 NA  6 13      y #> 9: NA 15 NA NA NA      x  # good merge, ignoring variable x from y merge(x2, y2, by = \"id\")[] #> → removing key variables `id` from yvars #> ℹ variable `x` in table y is ignored because arguments `update_NAs` and #> `update_values` are FALSE. #>  #> ── JOYn Report ── #>  #>    report n percent #> 1:      x 2   28.6% #> 2:  x & y 3   42.9% #> 3:      y 2   28.6% #> 4:  total 7    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #>    id  t  x yd  y report #> 1:  1  1 16  1 11  x & y #> 2:  2  1 NA  2 15  x & y #> 3:  3  2 NA  3 10  x & y #> 4:  4  2 12 NA NA      x #> 5:  5 NA NA  5 20      y #> 6:  6 NA NA  6 13      y #> 7: NA NA 15 NA NA      x  # update NAs in x variable form x merge(x2, y2, by = \"id\", update_NAs = TRUE)[] #> → removing key variables `id` from yvars #> ── JOYn Report ── #>  #>        report n percent #> 1: NA updated 2   28.6% #> 2:          x 2   28.6% #> 3:      x & y 1   14.3% #> 4:          y 2   28.6% #> 5:      total 7    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #>    id  t  x yd  y     report #> 1:  1  1 16  1 11      x & y #> 2:  2  1 17  2 15 NA updated #> 3:  3  2 20  3 10 NA updated #> 4:  4  2 12 NA NA          x #> 5:  5 NA 18  5 20          y #> 6:  6 NA 19  6 13          y #> 7: NA NA 15 NA NA          x  # Update values in x with variables from y merge(x2, y2, by = \"id\", update_values = TRUE)[] #> → removing key variables `id` from yvars #> ── JOYn Report ── #>  #>         report n percent #> 1:  NA updated 2   28.6% #> 2: not updated 2   28.6% #> 3:       x & y 1   14.3% #> 4:           y 2   28.6% #> 5:       total 7    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #>    id  t  x yd  y      report #> 1:  1  1 16  1 11       x & y #> 2:  2  1 17  2 15  NA updated #> 3:  3  2 20  3 10  NA updated #> 4:  4  2 12 NA NA not updated #> 5:  5 NA 18  5 20           y #> 6:  6 NA 19  6 13           y #> 7: NA NA 15 NA NA not updated   # do not bring any variable from Y into x, just the report merge(x2, y2, by = \"id\", yvars = NULL)[] #>  #> ── JOYn Report ── #>  #>    report n percent #> 1:      x 2   28.6% #> 2:  x & y 3   42.9% #> 3:      y 2   28.6% #> 4:  total 7    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #>    id  t  x report #> 1:  1  1 16  x & y #> 2:  2  1 NA  x & y #> 3:  3  2 NA  x & y #> 4:  4  2 12      x #> 5:  5 NA NA      y #> 6:  6 NA NA      y #> 7: NA NA 15      x"},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 joyn authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/reference/check_by_vars.html","id":null,"dir":"Reference","previous_headings":"","what":"Check by input — check_by_vars","title":"Check by input — check_by_vars","text":"function checks variable name(s) used key(s) join","code":""},{"path":"/reference/check_by_vars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check by input — check_by_vars","text":"","code":"check_by_vars(by, x, y)"},{"path":"/reference/check_by_vars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check by input — check_by_vars","text":"vector shared column names x y merge . defaults shared key columns two tables. y key columns, defaults key x. x, y data tables. y coerced data.table one already.","code":""},{"path":"/reference/check_by_vars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check by input — check_by_vars","text":"list information variables","code":""},{"path":"/reference/check_by_vars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check by input — check_by_vars","text":"","code":"if (FALSE) { x1 = data.frame(        id = c(1L, 1L, 2L, 3L, NA_integer_),        t  = c(1L, 2L, 1L, 2L, NA_integer_),        x  = 11:15) y1 = data.frame(id = 1:2,                 y  = c(11L, 15L)) # With var \"id\" shared in x and y check_by_vars(by = \"id\", x = x1, y = y1) }"},{"path":"/reference/check_dt_by.html","id":null,"dir":"Reference","previous_headings":"","what":"Check dt by vars — check_dt_by","title":"Check dt by vars — check_dt_by","text":"check variable(s) data frames joined: either single var, common right left dt, ","code":""},{"path":"/reference/check_dt_by.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check dt by vars — check_dt_by","text":"","code":"check_dt_by(x, y, by, by.x, by.y)"},{"path":"/reference/check_dt_by.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check dt by vars — check_dt_by","text":"x left table y right table character: variable join (common variable x y) .x character: specified var x join .y character: specified var y join ","code":""},{"path":"/reference/check_dt_by.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check dt by vars — check_dt_by","text":"character specifying checked variable(s) join ","code":""},{"path":"/reference/check_dt_by.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check dt by vars — check_dt_by","text":"","code":"if (FALSE) { x = data.table(id1 = c(1, 1, 2, 3, 3),                id2 = c(1, 1, 2, 3, 4),                t   = c(1L, 2L, 1L, 2L, NA_integer_),                x   = c(16, 12, NA, NA, 15)) y = data.table(id  = c(1, 2, 5, 6, 3),                id2 = c(1, 1, 2, 3, 4),                y   = c(11L, 15L, 20L, 13L, 10L),                x   = c(16:20)) # example specifying by.x and by.y check_dt_by(x, y, by.x = \"id1\", by.y = \"id2\") }"},{"path":"/reference/check_duplicate_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if vars in dt have duplicate names — check_duplicate_names","title":"Check if vars in dt have duplicate names — check_duplicate_names","text":"Check vars dt duplicate names","code":""},{"path":"/reference/check_duplicate_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if vars in dt have duplicate names — check_duplicate_names","text":"","code":"check_duplicate_names(dt, name)"},{"path":"/reference/check_duplicate_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if vars in dt have duplicate names — check_duplicate_names","text":"dt data.frame check name var name check duplicates dt","code":""},{"path":"/reference/check_duplicate_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if vars in dt have duplicate names — check_duplicate_names","text":"logical either TRUE, duplicates found, FALSE otherwise","code":""},{"path":"/reference/check_duplicate_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if vars in dt have duplicate names — check_duplicate_names","text":"","code":"if (FALSE) { # When no duplicates x1 = data.table(id = c(1L, 1L, 2L, 3L, NA_integer_),                 t  = c(1L, 2L, 1L, 2L, NA_integer_),                 x  = 11:15) check_duplicate_names(x1, \"x\")  # When duplicates x1_duplicates = data.frame(id = c(1L, 1L, 2L, 3L, NA_integer_),                            x  = c(1L, 2L, 1L, 2L, NA_integer_),                            x  = 11:15,                            check.names = FALSE) check_duplicate_names(x1_duplicates, \"x\") }"},{"path":"/reference/check_match_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Check match type consistency — check_match_type","title":"Check match type consistency — check_match_type","text":"function checks match type chosen user consistent data. (Match type must one valid types: \"1:1\", \"1:m\", \"m:1\", \"m:m\")","code":""},{"path":"/reference/check_match_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check match type consistency — check_match_type","text":"","code":"check_match_type(x, y, by, match_type, verbose)"},{"path":"/reference/check_match_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check match type consistency — check_match_type","text":"x, y data tables. y coerced data.table one already. vector shared column names x y merge . defaults shared key columns two tables. y key columns, defaults key x. match_type character: one \"m:m\", \"m:1\", \"1:m\", \"1:1\". Default \"1:1\" since restrictive. However, following Stata's recommendation, better explicit use three match types (See details match types sections).","code":""},{"path":"/reference/check_match_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check match type consistency — check_match_type","text":"character vector split_match_type","code":""},{"path":"/reference/check_match_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check match type consistency — check_match_type","text":"","code":"if (FALSE) { # Consistent match type x1 = data.frame(        id = c(1L, 1L, 2L, 3L, NA_integer_),        t  = c(1L, 2L, 1L, 2L, NA_integer_),        x  = 11:15) y1 = data.frame(id = 1:2,                 y  = c(11L, 15L)) check_match_type(x = x1, y=y1, by=\"id\", match_type = \"m:1\")  # Inconsistent match type check_match_type(x = x1, y=y1, by=\"id\", match_type = \"1:1\") }"},{"path":"/reference/check_new_y_vars.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename vars in y so they are different to x's when joined — check_new_y_vars","title":"Rename vars in y so they are different to x's when joined — check_new_y_vars","text":"Check vars y names vars x, return new variables names y vars joined data frame","code":""},{"path":"/reference/check_new_y_vars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename vars in y so they are different to x's when joined — check_new_y_vars","text":"","code":"check_new_y_vars(x, by, y_vars_to_keep)"},{"path":"/reference/check_new_y_vars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename vars in y so they are different to x's when joined — check_new_y_vars","text":"x master table character: vars y_vars_to_keep character vector y variables keep","code":""},{"path":"/reference/check_new_y_vars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rename vars in y so they are different to x's when joined — check_new_y_vars","text":"vector new variable names y","code":""},{"path":"/reference/check_new_y_vars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rename vars in y so they are different to x's when joined — check_new_y_vars","text":"","code":"if (FALSE) { y2 = data.frame(id = c(1, 2, 5, 6, 3),                 yd = c(1, 2, 5, 6, 3),                 y  = c(11L, 15L, 20L, 13L, 10L),                 x  = c(16:20)) y_vars_to_keep <- check_y_vars_to_keep(TRUE, y2, by = \"id\") x2 = data.frame(id = c(1, 1, 2, 3, NA),                 t  = c(1L, 2L, 1L, 2L, NA_integer_),                 x  = c(16, 12, NA, NA, 15)) check_new_y_vars(x = x2, by=\"id\", y_vars_to_keep) }"},{"path":"/reference/check_reportvar.html","id":null,"dir":"Reference","previous_headings":"","what":"Check reporting variable — check_reportvar","title":"Check reporting variable — check_reportvar","text":"check reportvar input  resulting data frame reporting variable (storing joyn's report), check return valid name.","code":""},{"path":"/reference/check_reportvar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check reporting variable — check_reportvar","text":"","code":"check_reportvar(reportvar, verbose = getOption(\"joyn.verbose\"))"},{"path":"/reference/check_reportvar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check reporting variable — check_reportvar","text":"input reportvar character, return valid name report var. NULL FALSE, return NULL.","code":""},{"path":"/reference/check_reportvar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check reporting variable — check_reportvar","text":"","code":"if (FALSE) { # When null - reporting variable not returned in merged dt check_reportvar(reportvar = NULL) # When FALSE - reporting variable not returned in merged dt check_reportvar(reportvar = FALSE) # When character check_reportvar(reportvar = \".joyn\") }"},{"path":"/reference/check_xy.html","id":null,"dir":"Reference","previous_headings":"","what":"Check tables X and Y — check_xy","title":"Check tables X and Y — check_xy","text":"function performs checks inspired merge.data.table: detects errors x /y columns x /y contain duplicate column names","code":""},{"path":"/reference/check_xy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check tables X and Y — check_xy","text":"","code":"check_xy(x, y)"},{"path":"/reference/check_xy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check tables X and Y — check_xy","text":"x data frame: referred left R terminology, master Stata terminology. y data frame: referred right R terminology, using Stata terminology.","code":""},{"path":"/reference/check_xy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check tables X and Y — check_xy","text":"invisible TRUE","code":""},{"path":"/reference/check_xy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check tables X and Y — check_xy","text":"","code":"if (FALSE) { # Check passing with no errors library(data.table) x1 = data.table(id = c(1L, 1L, 2L, 3L, NA_integer_),                 t  = c(1L, 2L, 1L, 2L, NA_integer_),                 x  = 11:15) y1 = data.table(id = c(1,2, 4),                 y  = c(11L, 15L, 16)) check_xy(x = x1, y=y1) }"},{"path":"/reference/check_y_vars_to_keep.html","id":null,"dir":"Reference","previous_headings":"","what":"Check variables in y that will be kept in returning table — check_y_vars_to_keep","title":"Check variables in y that will be kept in returning table — check_y_vars_to_keep","text":"check return variable names y keep returning table, excluding keys merge","code":""},{"path":"/reference/check_y_vars_to_keep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check variables in y that will be kept in returning table — check_y_vars_to_keep","text":"","code":"check_y_vars_to_keep(y_vars_to_keep, y, by)"},{"path":"/reference/check_y_vars_to_keep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check variables in y that will be kept in returning table — check_y_vars_to_keep","text":"y_vars_to_keep either TRUE, keep vars y; FALSE NULL, keep vars; character vector specifying variables y keep y data frame vector shared column names x y merge . defaults shared key columns two tables. y key columns, defaults key x.","code":""},{"path":"/reference/check_y_vars_to_keep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check variables in y that will be kept in returning table — check_y_vars_to_keep","text":"character vector variable names y table","code":""},{"path":"/reference/check_y_vars_to_keep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check variables in y that will be kept in returning table — check_y_vars_to_keep","text":"","code":"if (FALSE) { y1 = data.table(id = 1:2,                y  = c(11L, 15L)) # With y_vars_to_keep TRUE check_y_vars_to_keep(TRUE, y1, by = \"id\") # With y_vars_to_keep FALSE check_y_vars_to_keep(FALSE, y1, by = \"id\") # Specifying which y vars to keep check_y_vars_to_keep(\"y\", y1, by = \"id\") }"},{"path":"/reference/clear_joynenv.html","id":null,"dir":"Reference","previous_headings":"","what":"Clearing joyn environment — clear_joynenv","title":"Clearing joyn environment — clear_joynenv","text":"Clearing joyn environment","code":""},{"path":"/reference/clear_joynenv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clearing joyn environment — clear_joynenv","text":"","code":"clear_joynenv()"},{"path":"/reference/clear_joynenv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clearing joyn environment — clear_joynenv","text":"","code":"if (FALSE) { # Storing a message store_msg(\"info\", \"simple message\")  # Clearing the environment clear_joynenv()  # Checking it does not exist in the environment print(joyn_msgs_exist()) }"},{"path":"/reference/freq_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Tabulate simple frequencies — freq_table","title":"Tabulate simple frequencies — freq_table","text":"tabulate one variable frequencies","code":""},{"path":"/reference/freq_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tabulate simple frequencies — freq_table","text":"","code":"freq_table(x, byvar, digits = 1, na.rm = TRUE)"},{"path":"/reference/freq_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tabulate simple frequencies — freq_table","text":"x data frame byvar character: name variable tabulate. Use Standard evaluation. digits numeric: number decimal places display. Default 1. na.rm logical: TRUE remove NAs calculations. Default TRUE","code":""},{"path":"/reference/freq_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tabulate simple frequencies — freq_table","text":"data.table frequencies.","code":""},{"path":"/reference/freq_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tabulate simple frequencies — freq_table","text":"","code":"library(data.table) x4 = data.table(id1 = c(1, 1, 2, 3, 3),                 id2 = c(1, 1, 2, 3, 4),                 t   = c(1L, 2L, 1L, 2L, NA_integer_),                 x   = c(16, 12, NA, NA, 15)) freq_table(x4, \"id1\") #>      id1 n percent #> 1:     1 2     40% #> 2:     2 1     20% #> 3:     3 2     40% #> 4: total 5    100%"},{"path":"/reference/full_join.html","id":null,"dir":"Reference","previous_headings":"","what":"Full join two data frames — full_join","title":"Full join two data frames — full_join","text":"joyn wrapper works similar fashion dplyr::full_join","code":""},{"path":"/reference/full_join.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Full join two data frames — full_join","text":"","code":"full_join(   x,   y,   by = intersect(names(x), names(y)),   copy = FALSE,   suffix = c(\".x\", \".y\"),   keep = NULL,   na_matches = c(\"na\", \"never\"),   multiple = \"all\",   unmatched = \"drop\",   relationship = \"one-to-one\",   y_vars_to_keep = TRUE,   update_values = FALSE,   update_NAs = update_values,   reportvar = getOption(\"joyn.reportvar\"),   reporttype = c(\"character\", \"numeric\"),   roll = NULL,   keep_common_vars = FALSE,   sort = TRUE,   verbose = getOption(\"joyn.verbose\"),   ... )"},{"path":"/reference/full_join.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Full join two data frames — full_join","text":"x data frame: referred left R terminology, master Stata terminology. y data frame: referred right R terminology, using Stata terminology. character vector variables join . NULL, default, joyn natural join, using variables common names across two tables. message lists variables can check correct (suppress message, simply explicitly list variables want join). join different variables x y use vector expressions. example, = c(\"= b\", \"z\") use \"\" x, \"b\" y, \"z\" tables. copy x y data source, copy TRUE, y copied src x.  allows join tables across srcs, potentially expensive operation must opt . suffix non-joined duplicate variables x y, suffixes added output disambiguate . character vector length 2. keep join keys x y preserved output? NULL, default, joins equality retain keys x, joins inequality retain keys inputs. TRUE, keys inputs retained. FALSE, keys x retained. right full joins, data key columns corresponding rows exist y merged key columns x. used joining inequality conditions. na_matches two NA two NaN values match? \"na\", default, treats two NA two NaN values equal, like %%, match(), merge(). \"never\" treats two NA two NaN values different, never match together values. similar joins database sources base::merge(incomparables = NA). multiple Handling rows x multiple matches y. row x: \"\", default, returns every match detected y. behavior SQL. \"\" returns one match detected y, guarantees match returned. often faster \"first\" \"last\" just need detect least one match. \"first\" returns first match detected y. \"last\" returns last match detected y. unmatched unmatched keys result dropped rows handled? \"drop\" drops unmatched keys result. \"error\" throws error unmatched keys detected. unmatched intended protect accidentally dropping rows join. checks unmatched keys input potentially drop rows. left joins, checks y. right joins, checks x. inner joins, checks x y. case, unmatched also allowed character vector length 2 specify behavior x y independently. relationship Handling expected relationship keys x y. expectations chosen list invalidated, error thrown. NULL, default, expect relationship x y. However, equality joins check many--many relationship (typically unexpected) warn one occurs, encouraging either take closer look inputs make relationship explicit specifying \"many--many\". See Many--many relationships section details. \"one--one\" expects: row x matches 1 row y. row y matches 1 row x. \"one--many\" expects: row y matches 1 row x. \"many--one\" expects: row x matches 1 row y. \"many--many\" perform relationship checks, provided allow explicit relationship know exists. relationship handle cases zero matches. , see unmatched. y_vars_to_keep character: Vector variable names y kept merge. TRUE (default), keeps brings variables y x. FALSE NULL, bring variable x, report generated. update_values logical: TRUE, update values variables x actual variables y name ones x. NAs y used update actual values x. Yet, default, NAs x updated values y. avoid , make sure set update_NAs = FALSE update_NAs logical: TRUE, update NA values variables x actual values variables y name ones x. FALSE, NA values updated, even update_values TRUE reportvar character: Name reporting variable. Default \".joyn\". variable \"_merge\" Stata performing merge. FALSE NULL, reporting variable excluded final table, though summary join display concluding. reporttype character: One \"character\" \"numeric\". Default \"character\". \"numeric\", reporting variable contain  numeric codes source contents observation joined table. See information. roll double: implemented keep_common_vars logical: TRUE, keep original variable y tables common variable names. Thus, prefix \"y.\" added original name distinguish resulting variable joined table. sort logical: TRUE, sort key variables . Default TRUE. verbose logical: FALSE, display message (programmer's option). Default TRUE. ... Arguments passed joyn","code":""},{"path":"/reference/full_join.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Full join two data frames — full_join","text":"data frame","code":""},{"path":"/reference/full_join.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Full join two data frames — full_join","text":"","code":"# Simple full join library(data.table)  x1 = data.table(id = c(1L, 1L, 2L, 3L, NA_integer_),                 t  = c(1L, 2L, 1L, 2L, NA_integer_),                 x  = 11:15) y1 = data.table(id = c(1,2, 4),                 y  = c(11L, 15L, 16)) full_join(x1, y1, relationship = \"many-to-one\") #>  #> ── JOYn Report ── #>  #>    .joyn n percent #> 1:     x 2   33.3% #> 2: x & y 3     50% #> 3:     y 1   16.7% #> 4: total 6    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ℹ ❯ Joyn's report available in variable .joyn #> ℹ ❯ Removing key variables id from id and y #> ● Timing: The full joyn is executed in 0.000761 seconds #> ● Timing: the entire joyn function, including checks, is executed in 0.036676 #> seconds #>    id  t  x  y .joyn #> 1: NA NA 15 NA     x #> 2:  1  1 11 11 x & y #> 3:  1  2 12 11 x & y #> 4:  2  1 13 15 x & y #> 5:  3  2 14 NA     x #> 6:  4 NA NA 16     y"},{"path":"/reference/inner_join.html","id":null,"dir":"Reference","previous_headings":"","what":"Inner join two data frames — inner_join","title":"Inner join two data frames — inner_join","text":"joyn wrapper works similar fashion dplyr::inner_join","code":""},{"path":"/reference/inner_join.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inner join two data frames — inner_join","text":"","code":"inner_join(   x,   y,   by = intersect(names(x), names(y)),   copy = FALSE,   suffix = c(\".x\", \".y\"),   keep = NULL,   na_matches = c(\"na\", \"never\"),   multiple = \"all\",   unmatched = \"drop\",   relationship = \"one-to-one\",   y_vars_to_keep = TRUE,   update_values = FALSE,   update_NAs = update_values,   reportvar = getOption(\"joyn.reportvar\"),   reporttype = c(\"character\", \"numeric\"),   roll = NULL,   keep_common_vars = FALSE,   sort = TRUE,   verbose = getOption(\"joyn.verbose\"),   ... )"},{"path":"/reference/inner_join.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inner join two data frames — inner_join","text":"x data frame: referred left R terminology, master Stata terminology. y data frame: referred right R terminology, using Stata terminology. character vector variables join . NULL, default, joyn natural join, using variables common names across two tables. message lists variables can check correct (suppress message, simply explicitly list variables want join). join different variables x y use vector expressions. example, = c(\"= b\", \"z\") use \"\" x, \"b\" y, \"z\" tables. copy x y data source, copy TRUE, y copied src x.  allows join tables across srcs, potentially expensive operation must opt . suffix non-joined duplicate variables x y, suffixes added output disambiguate . character vector length 2. keep join keys x y preserved output? NULL, default, joins equality retain keys x, joins inequality retain keys inputs. TRUE, keys inputs retained. FALSE, keys x retained. right full joins, data key columns corresponding rows exist y merged key columns x. used joining inequality conditions. na_matches two NA two NaN values match? \"na\", default, treats two NA two NaN values equal, like %%, match(), merge(). \"never\" treats two NA two NaN values different, never match together values. similar joins database sources base::merge(incomparables = NA). multiple Handling rows x multiple matches y. row x: \"\", default, returns every match detected y. behavior SQL. \"\" returns one match detected y, guarantees match returned. often faster \"first\" \"last\" just need detect least one match. \"first\" returns first match detected y. \"last\" returns last match detected y. unmatched unmatched keys result dropped rows handled? \"drop\" drops unmatched keys result. \"error\" throws error unmatched keys detected. unmatched intended protect accidentally dropping rows join. checks unmatched keys input potentially drop rows. left joins, checks y. right joins, checks x. inner joins, checks x y. case, unmatched also allowed character vector length 2 specify behavior x y independently. relationship Handling expected relationship keys x y. expectations chosen list invalidated, error thrown. NULL, default, expect relationship x y. However, equality joins check many--many relationship (typically unexpected) warn one occurs, encouraging either take closer look inputs make relationship explicit specifying \"many--many\". See Many--many relationships section details. \"one--one\" expects: row x matches 1 row y. row y matches 1 row x. \"one--many\" expects: row y matches 1 row x. \"many--one\" expects: row x matches 1 row y. \"many--many\" perform relationship checks, provided allow explicit relationship know exists. relationship handle cases zero matches. , see unmatched. y_vars_to_keep character: Vector variable names y kept merge. TRUE (default), keeps brings variables y x. FALSE NULL, bring variable x, report generated. update_values logical: TRUE, update values variables x actual variables y name ones x. NAs y used update actual values x. Yet, default, NAs x updated values y. avoid , make sure set update_NAs = FALSE update_NAs logical: TRUE, update NA values variables x actual values variables y name ones x. FALSE, NA values updated, even update_values TRUE reportvar character: Name reporting variable. Default \".joyn\". variable \"_merge\" Stata performing merge. FALSE NULL, reporting variable excluded final table, though summary join display concluding. reporttype character: One \"character\" \"numeric\". Default \"character\". \"numeric\", reporting variable contain  numeric codes source contents observation joined table. See information. roll double: implemented keep_common_vars logical: TRUE, keep original variable y tables common variable names. Thus, prefix \"y.\" added original name distinguish resulting variable joined table. sort logical: TRUE, sort key variables . Default TRUE. verbose logical: FALSE, display message (programmer's option). Default TRUE. ... Arguments passed joyn","code":""},{"path":"/reference/inner_join.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inner join two data frames — inner_join","text":"data frame","code":""},{"path":"/reference/inner_join.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inner join two data frames — inner_join","text":"","code":"# Simple full join library(data.table)  x1 = data.table(id = c(1L, 1L, 2L, 3L, NA_integer_),                 t  = c(1L, 2L, 1L, 2L, NA_integer_),                 x  = 11:15) y1 = data.table(id = c(1,2, 4),                 y  = c(11L, 15L, 16)) inner_join(x1, y1, relationship = \"many-to-one\") #>  #> ── JOYn Report ── #>  #>    .joyn n percent #> 1: x & y 3    100% #> 2: total 3    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ℹ ❯ Joyn's report available in variable .joyn #> ℹ ❯ Removing key variables id from id and y #> ● Timing: The full joyn is executed in 8.6e-05 seconds #> ● Timing: the entire joyn function, including checks, is executed in 0.036219 #> seconds #>    id t  x  y .joyn #> 1:  1 1 11 11 x & y #> 2:  1 2 12 11 x & y #> 3:  2 1 13 15 x & y"},{"path":"/reference/is_balanced.html","id":null,"dir":"Reference","previous_headings":"","what":"Is data frame balanced by group? — is_balanced","title":"Is data frame balanced by group? — is_balanced","text":"Check data frame balanced group columns, .e., contains every combination elements specified variables","code":""},{"path":"/reference/is_balanced.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is data frame balanced by group? — is_balanced","text":"","code":"is_balanced(df, by, return = c(\"logic\", \"table\"))"},{"path":"/reference/is_balanced.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is data frame balanced by group? — is_balanced","text":"df data frame character: variables used check df balanced return character: either \"logic\" \"table\". \"logic\", returns TRUE FALSE depending whether data frame balanced. \"table\" returns unbalanced observations - .e. combinations elements specified variables found input df","code":""},{"path":"/reference/is_balanced.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is data frame balanced by group? — is_balanced","text":"logical, return == \"logic\", else returns data frame unbalanced observations","code":""},{"path":"/reference/is_balanced.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is data frame balanced by group? — is_balanced","text":"","code":"x1 = data.frame(id = c(1L, 1L, 2L, 3L, NA_integer_),                 t  = c(1L, 2L, 1L, 2L, NA_integer_),                 x  = 11:15) is_balanced(df = x1,             by = c(\"id\", \"t\"),             return = \"table\") # returns combination of elements in \"id\" and \"t\" not present in df #>   id t #> 1  3 1 #> 2  2 2 is_balanced(df = x1,             by = c(\"id\", \"t\"),             return = \"logic\") # FALSE #> [1] FALSE"},{"path":"/reference/is_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if dt is uniquely identified by by variable — is_id","title":"Check if dt is uniquely identified by by variable — is_id","text":"report dt uniquely identified var , report = TRUE, duplicates variable","code":""},{"path":"/reference/is_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if dt is uniquely identified by by variable — is_id","text":"","code":"is_id(dt, by, verbose = getOption(\"joyn.verbose\"), return_report = FALSE)"},{"path":"/reference/is_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if dt is uniquely identified by by variable — is_id","text":"dt either right left table variable merge verbose logical: TRUE messages displayed return_report logical: TRUE, returns data summary duplicates. FALSE, returns logical value depending whether dt uniquely identified ","code":""},{"path":"/reference/is_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if dt is uniquely identified by by variable — is_id","text":"logical data.frame, depending value argument return_report","code":""},{"path":"/reference/is_id.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if dt is uniquely identified by by variable — is_id","text":"","code":"library(data.table)  # example with data frame not uniquely identified by `by` var  y <- data.table(id = c(\"c\",\"b\", \"c\", \"a\"),                  y  = c(11L, 15L, 18L, 20L)) is_id(y, by = \"id\") #>  #> ── Duplicates in terms of `id`  #>    copies n percent #> 1:      1 2   66.7% #> 2:      2 1   33.3% #> 3:  total 3    100% #> ─────────────────────────────────────────────────────── End of is_id() report ── #> [1] FALSE is_id(y, by = \"id\", return_report = TRUE) #>  #> ── Duplicates in terms of `id`  #>    copies n percent #> 1:      1 2   66.7% #> 2:      2 1   33.3% #> 3:  total 3    100% #> ─────────────────────────────────────────────────────── End of is_id() report ── #>    id copies #> 1:  c      2 #> 2:  b      1 #> 3:  a      1  # example with data frame uniquely identified by `by` var  y1 <- data.table(id = c(\"1\",\"3\", \"2\", \"9\"),                  y  = c(11L, 15L, 18L, 20L)) is_id(y1, by = \"id\") #>  #> ── Duplicates in terms of `id`  #>    copies n percent #> 1:      1 4    100% #> 2:  total 4    100% #> ─────────────────────────────────────────────────────── End of is_id() report ── #> [1] TRUE"},{"path":"/reference/is_match_type_error.html","id":null,"dir":"Reference","previous_headings":"","what":"Confirm if match type error — is_match_type_error","title":"Confirm if match type error — is_match_type_error","text":"Confirm match type error","code":""},{"path":"/reference/is_match_type_error.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Confirm if match type error — is_match_type_error","text":"","code":"is_match_type_error(x, name, by, verbose, match_type_error)"},{"path":"/reference/is_match_type_error.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Confirm if match type error — is_match_type_error","text":"name name data frame vector shared column names x y merge . defaults shared key columns two tables. y key columns, defaults key x. match_type_error logical: existing code","code":""},{"path":"/reference/is_match_type_error.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Confirm if match type error — is_match_type_error","text":"logical","code":""},{"path":"/reference/is_match_type_error.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Confirm if match type error — is_match_type_error","text":"","code":"if (FALSE) { # example with dt not uniquely identified by \"id\" x1 = data.table(id = c(1L, 1L, 2L, 3L, NA_integer_),                 t  = c(1L, 2L, 1L, 2L, NA_integer_),                 x  = 11:15) is_match_type_error(x1, name = \"x1\", by = \"id\") }"},{"path":"/reference/is_valid_m_key.html","id":null,"dir":"Reference","previous_headings":"","what":"Check whether specified ","title":"Check whether specified ","text":"\"many\" relationship specified, check valid.  (Specified many relationship valid dt instead uniquely identified specified keys)","code":""},{"path":"/reference/is_valid_m_key.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check whether specified ","text":"","code":"is_valid_m_key(dt, by)"},{"path":"/reference/is_valid_m_key.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check whether specified ","text":"dt data object character vector: specified keys, already fixed","code":""},{"path":"/reference/is_valid_m_key.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check whether specified ","text":"logical: TRUE valid, FALSE uniquely identified","code":""},{"path":"/reference/is_valid_m_key.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check whether specified ","text":"","code":"if (FALSE) { # example with data frame uniquely identified by specified `by` vars x1 = data.frame(id  = c(1L, 1L, 2L, 3L, NA_integer_),                  t  = c(1L, 2L, 1L, 2L, NA_integer_),                  x  = 11:15)  is_valid_m_key(x1, by = c(\"id\", \"t\")) # example with valid specified \"many\" relationship x2 = data.frame(id  = c(1L, 1L, 1L, 3L, NA_integer_),                  t  = c(1L, 2L, 1L, 2L, NA_integer_),                  x  = 11:15) is_valid_m_key(x2, by = c(\"id\", \"t\")) }"},{"path":"/reference/joyn-package.html","id":null,"dir":"Reference","previous_headings":"","what":"joyn: Tool for Diagnosis of Tables Joins and Complementary Join Features — joyn-package","title":"joyn: Tool for Diagnosis of Tables Joins and Complementary Join Features — joyn-package","text":"Tool diagnosing table joins. combines speed `collapse` `data.table`, flexibility `dplyr`, diagnosis features `merge` command `Stata`.","code":""},{"path":[]},{"path":"/reference/joyn-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"joyn: Tool for Diagnosis of Tables Joins and Complementary Join Features — joyn-package","text":"Maintainer: R.Andres Castaneda acastanedaa@worldbank.org Authors: Zander Prinsloo zprinsloo@worldbank.org contributors: Rossana Tatulli rtatulli@worldbank.org [contributor]","code":""},{"path":"/reference/joyn.html","id":null,"dir":"Reference","previous_headings":"","what":"Join two tables — joyn","title":"Join two tables — joyn","text":"primary function joyn package. executes full join, performs number checks, filters allow user-specified join.","code":""},{"path":"/reference/joyn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Join two tables — joyn","text":"","code":"joyn(   x,   y,   by = intersect(names(x), names(y)),   match_type = getOption(\"joyn.match_type\"),   keep = c(\"full\", \"left\", \"master\", \"right\", \"using\", \"inner\"),   y_vars_to_keep = TRUE,   update_values = FALSE,   update_NAs = update_values,   reportvar = getOption(\"joyn.reportvar\"),   reporttype = c(\"character\", \"numeric\"),   roll = NULL,   keep_common_vars = FALSE,   sort = TRUE,   verbose = getOption(\"joyn.verbose\"),   suffixes = getOption(\"joyn.suffixes\"),   allow.cartesian = deprecated(),   yvars = deprecated(),   keep_y_in_x = deprecated(),   na.last = getOption(\"joyn.na.last\") )"},{"path":"/reference/joyn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Join two tables — joyn","text":"x data frame: referred left R terminology, master Stata terminology. y data frame: referred right R terminology, using Stata terminology. character vector variables join . NULL, default, joyn natural join, using variables common names across two tables. message lists variables can check correct (suppress message, simply explicitly list variables want join). join different variables x y use vector expressions. example, = c(\"= b\", \"z\") use \"\" x, \"b\" y, \"z\" tables. match_type character: one \"m:m\", \"m:1\", \"1:m\", \"1:1\". Default \"1:1\" since restrictive. However, following Stata's recommendation, better explicit use three match types (See details match types sections). keep atomic character vector length 1: One \"full\", \"left\", \"master\", \"right\", \"using\", \"inner\". Default \"full\". Even though regular behavior joins R, objective joyn present diagnosis join requires full join. default full join. Yet, \"left\" \"master\", keeps observations matched tables ones match x. ones y discarded. \"right\" \"using\", keeps observations matched tables ones match y. ones x discarded. \"inner\", keeps observations matched tables. Note , example, keep = \"left\", joyn() function still executes full join hood filters rows output table left join. behaviour, inefficient, allows diagnostics checks conducted joyn. y_vars_to_keep character: Vector variable names y kept merge. TRUE (default), keeps brings variables y x. FALSE NULL, bring variable x, report generated. update_values logical: TRUE, update values variables x actual variables y name ones x. NAs y used update actual values x. Yet, default, NAs x updated values y. avoid , make sure set update_NAs = FALSE update_NAs logical: TRUE, update NA values variables x actual values variables y name ones x. FALSE, NA values updated, even update_values TRUE reportvar character: Name reporting variable. Default \".joyn\". variable \"_merge\" Stata performing merge. FALSE NULL, reporting variable excluded final table, though summary join display concluding. reporttype character: One \"character\" \"numeric\". Default \"character\". \"numeric\", reporting variable contain  numeric codes source contents observation joined table. See information. roll double: implemented keep_common_vars logical: TRUE, keep original variable y tables common variable names. Thus, prefix \"y.\" added original name distinguish resulting variable joined table. sort logical: TRUE, sort key variables . Default TRUE. verbose logical: FALSE, display message (programmer's option). Default TRUE. suffixes character(2) specifying suffixes used making non-column names unique. suffix behaviour works similar fashion base::merge method . allow.cartesian logical: Check documentation official web site. Default NULL, implies join \"1:1\" FALSE, join \"m\" , converted TRUE. specifying TRUE FALSE force behavior join. yvars : use now y_vars_to_keep keep_y_in_x : use now keep_common_vars na.last logical. TRUE, missing values data placed last; FALSE, placed first; NA removed. na.last=NA valid x[order(., na.last)] default TRUE. setorder setorderv accept TRUE/FALSE default FALSE.","code":""},{"path":"/reference/joyn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Join two tables — joyn","text":"data.table joining x y.","code":""},{"path":"/reference/joyn.html","id":"match-types","dir":"Reference","previous_headings":"","what":"match types","title":"Join two tables — joyn","text":"Using wording Stata manual 1:1: specifies one--one match merge. variables specified  uniquely identify single observations table. 1:m m:1: specify one--many many--one match merges, respectively. means tables observations uniquely identify variables , table many (two )  observations identify variables m:m refers many--many merge. variables uniquely identify observations either table. Matching performed combining observations equal values ; within matching values, first observation master (.e. left x) table matched first matching observation using (.e. right y) table; second, second; . unequal number observations within group, last observation shorter group used repeatedly match subsequent observations longer group.","code":""},{"path":"/reference/joyn.html","id":"reporttype","dir":"Reference","previous_headings":"","what":"reporttype","title":"Join two tables — joyn","text":"reporttype = \"numeric\", numeric values following meaning: 1: row comes x, .e. \"x\" 2: row comes y, .e. \"y\" 3: row x y, .e. \"x & y\" 4: row NA x updated y, .e. \"NA updated\" 5: row valued x updated y, .e. \"value updated\" 6: row x updated, .e. \"updated\"","code":""},{"path":"/reference/joyn.html","id":"nas-order","dir":"Reference","previous_headings":"","what":"NAs order","title":"Join two tables — joyn","text":"NAs placed either first last resulting data.frame depending value getOption(\"joyn.na.last\"). Default FALSE default value data.table::setorderv.","code":""},{"path":"/reference/joyn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Join two tables — joyn","text":"","code":"# Simple join library(data.table) x1 = data.table(id = c(1L, 1L, 2L, 3L, NA_integer_), t  = c(1L, 2L, 1L, 2L, NA_integer_), x  = 11:15)  y1 = data.table(id = 1:2,                 y  = c(11L, 15L))  x2 = data.table(id = c(1, 1, 2, 3, NA),                 t  = c(1L, 2L, 1L, 2L, NA_integer_),                 x  = c(16, 12, NA, NA, 15))  y2 = data.table(id = c(1, 2, 5, 6, 3),               yd = c(1, 2, 5, 6, 3),               y  = c(11L, 15L, 20L, 13L, 10L),               x  = c(16:20)) joyn(x1, y1, match_type = \"m:1\") #>  #> ── JOYn Report ── #>  #>    .joyn n percent #> 1:     x 2     40% #> 2: x & y 3     60% #> 3: total 5    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ℹ ❯ Joyn's report available in variable .joyn #> ℹ ❯ Removing key variables id from id and y #> ● Timing: The full joyn is executed in 4.4e-05 seconds #> ● Timing: the entire joyn function, including checks, is executed in 0.025815 #> seconds #>    id  t  x  y .joyn #> 1: NA NA 15 NA     x #> 2:  1  1 11 11 x & y #> 3:  1  2 12 11 x & y #> 4:  2  1 13 15 x & y #> 5:  3  2 14 NA     x  # Bad merge for not specifying by argument or match_type joyn(x2, y2) #>  #> ── JOYn Report ── #>  #>    .joyn n percent #> 1:     x 4   44.4% #> 2: x & y 1   11.1% #> 3:     y 4   44.4% #> 4: total 9    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ℹ ❯ Joyn's report available in variable .joyn #> ℹ ❯ Removing key variables id and x from id, yd, y, and x #> ● Timing: The full joyn is executed in 7.2e-05 seconds #> ● Timing: the entire joyn function, including checks, is executed in 0.031777 #> seconds #>    id  t  x yd  y .joyn #> 1: NA NA 15 NA NA     x #> 2:  1  2 12 NA NA     x #> 3:  1  1 16  1 11 x & y #> 4:  2  1 NA NA NA     x #> 5:  2 NA 17  2 15     y #> 6:  3  2 NA NA NA     x #> 7:  3 NA 20  3 10     y #> 8:  5 NA 18  5 20     y #> 9:  6 NA 19  6 13     y  # good merge, ignoring variable x from y joyn(x2, y2, by = \"id\", match_type = \"m:1\") #>  #> ── JOYn Report ── #>  #>    .joyn n percent #> 1:     x 1   14.3% #> 2: x & y 4   57.1% #> 3:     y 2   28.6% #> 4: total 7    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ℹ ❯ Joyn's report available in variable .joyn #> ℹ ❯ Removing key variables id from id, yd, y, and x #> ● Timing: The full joyn is executed in 8.1e-05 seconds #> ● Timing: the entire joyn function, including checks, is executed in 0.030527 #> seconds #>    id  t  x yd  y .joyn #> 1: NA NA 15 NA NA     x #> 2:  1  1 16  1 11 x & y #> 3:  1  2 12  1 11 x & y #> 4:  2  1 NA  2 15 x & y #> 5:  3  2 NA  3 10 x & y #> 6:  5 NA NA  5 20     y #> 7:  6 NA NA  6 13     y  # update NAs in x variable form x joyn(x2, y2, by = \"id\", update_NAs = TRUE, match_type = \"m:1\") #>  #> ── JOYn Report ── #>  #>         .joyn n percent #> 1: NA updated 4   57.1% #> 2:          x 1   14.3% #> 3:      x & y 2   28.6% #> 4:      total 7    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ℹ ❯ Joyn's report available in variable .joyn #> ℹ ❯ Removing key variables id from id, yd, y, and x #> ● Timing: The full joyn is executed in 8.3e-05 seconds #> ● Timing: the entire joyn function, including checks, is executed in 0.035547 #> seconds #>    id  t  x yd  y      .joyn #> 1: NA NA 15 NA NA          x #> 2:  1  1 16  1 11      x & y #> 3:  1  2 12  1 11      x & y #> 4:  2  1 17  2 15 NA updated #> 5:  3  2 20  3 10 NA updated #> 6:  5 NA 18  5 20 NA updated #> 7:  6 NA 19  6 13 NA updated  # Update values in x with variables from y joyn(x2, y2, by = \"id\", update_values = TRUE, match_type = \"m:1\") #>  #> ── JOYn Report ── #>  #>            .joyn n percent #> 1:    NA updated 4   57.1% #> 2:   not updated 1   14.3% #> 3: value updated 2   28.6% #> 4:         total 7    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ℹ ❯ Joyn's report available in variable .joyn #> ℹ ❯ Removing key variables id from id, yd, y, and x #> ● Timing: The full joyn is executed in 8.9e-05 seconds #> ● Timing: the entire joyn function, including checks, is executed in 0.047789 #> seconds #>    id  t  x yd  y         .joyn #> 1: NA NA 15 NA NA   not updated #> 2:  1  1 16  1 11 value updated #> 3:  1  2 16  1 11 value updated #> 4:  2  1 17  2 15    NA updated #> 5:  3  2 20  3 10    NA updated #> 6:  5 NA 18  5 20    NA updated #> 7:  6 NA 19  6 13    NA updated"},{"path":"/reference/joyn_msg.html","id":null,"dir":"Reference","previous_headings":"","what":"display type of joyn message — joyn_msg","title":"display type of joyn message — joyn_msg","text":"display type joyn message","code":""},{"path":"/reference/joyn_msg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"display type of joyn message — joyn_msg","text":"","code":"joyn_msg(type = c(\"all\", type_choices()))"},{"path":"/reference/joyn_msg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"display type of joyn message — joyn_msg","text":"type character: one following: \"info\", \"note\", \"warn\", \"timing\", \"err\" ","code":""},{"path":"/reference/joyn_msg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"display type of joyn message — joyn_msg","text":"returns data frame message invisibly. print message console","code":""},{"path":"/reference/joyn_msg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"display type of joyn message — joyn_msg","text":"","code":"# Storing msg with type \"info\" joyn:::store_msg(\"info\",   ok = cli::symbol$tick, \"  \",   pale = \"This is an info message\")  # Storing msg with type \"warn\" joyn:::store_msg(   type        = \"warn\",   warn        = paste(cli::symbol$warn, \"\\nWarning:\"),   pale        = \"  joyn does not currently allow inequality joins, so\",   bolded_pale = \"  keep = NULL\",   pale        = \"  will retain only keys in x. Equivalent to `keep = FALSE`\" )  joyn_msg(\"all\") #> ℹ ❯ Joyn's report available in variable .joyn #> ℹ ❯ Removing key variables id from id, yd, y, and x #> ● Timing: The full joyn is executed in 8.9e-05 seconds #> ● Timing: the entire joyn function, including checks, is executed in 0.047789 #> seconds #> ✔ This is an info message #> ⚠ Warning: joyn does not currently allow inequality joins, so keep = NULL will #> retain only keys in x. Equivalent to `keep = FALSE`"},{"path":"/reference/joyn_msgs_exist.html","id":null,"dir":"Reference","previous_headings":"","what":"Presence of joyn msgs in the environment — joyn_msgs_exist","title":"Presence of joyn msgs in the environment — joyn_msgs_exist","text":"Checks presence joyn messages stored joyn environment","code":""},{"path":"/reference/joyn_msgs_exist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Presence of joyn msgs in the environment — joyn_msgs_exist","text":"","code":"joyn_msgs_exist()"},{"path":"/reference/joyn_msgs_exist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Presence of joyn msgs in the environment — joyn_msgs_exist","text":"invisible TRUE","code":""},{"path":[]},{"path":"/reference/joyn_workhorse.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal workhorse join function, used in the backend of joyn — joyn_workhorse","title":"Internal workhorse join function, used in the backend of joyn — joyn_workhorse","text":"Always executes full join.","code":""},{"path":"/reference/joyn_workhorse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal workhorse join function, used in the backend of joyn — joyn_workhorse","text":"","code":"joyn_workhorse(   x,   y,   by = intersect(names(x), names(y)),   match_type = c(\"1:1\"),   suffixes = getOption(\"joyn.suffixes\") )"},{"path":"/reference/joyn_workhorse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal workhorse join function, used in the backend of joyn — joyn_workhorse","text":"x data object, \"left\" \"master\" y data object, \"right\" \"using\" atomic character vector: key specifying join match_type atomic character vector length 1: either \"1:1\" (default) \"1:m\", \"m:1\", \"m:m\". \"m:m\" executes data.table::merge.data.table backend, otherwise uses collapse::join() suffixes atomic character vector: give suffixes columns common x y","code":""},{"path":"/reference/joyn_workhorse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal workhorse join function, used in the backend of joyn — joyn_workhorse","text":"data object class x","code":""},{"path":"/reference/joyn_workhorse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Internal workhorse join function, used in the backend of joyn — joyn_workhorse","text":"","code":"if (FALSE) { # Full join library(data.table) x1 = data.table(id = c(1L, 1L, 2L, 3L, NA_integer_),                 t  = c(1L, 2L, 1L, 2L, NA_integer_),                 x  = 11:15) y1 = data.table(id = c(1,2, 4),                 y  = c(11L, 15L, 16)) joyn_workhorse(x = x1, y=y1) }"},{"path":"/reference/left_join.html","id":null,"dir":"Reference","previous_headings":"","what":"Left join two data frames — left_join","title":"Left join two data frames — left_join","text":"joyn wrapper works similar fashion dplyr::left_join","code":""},{"path":"/reference/left_join.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Left join two data frames — left_join","text":"","code":"left_join(   x,   y,   by = intersect(names(x), names(y)),   copy = FALSE,   suffix = c(\".x\", \".y\"),   keep = NULL,   na_matches = c(\"na\", \"never\"),   multiple = \"all\",   unmatched = \"drop\",   relationship = NULL,   y_vars_to_keep = TRUE,   update_values = FALSE,   update_NAs = update_values,   reportvar = getOption(\"joyn.reportvar\"),   reporttype = c(\"character\", \"numeric\"),   roll = NULL,   keep_common_vars = FALSE,   sort = TRUE,   verbose = getOption(\"joyn.verbose\"),   ... )"},{"path":"/reference/left_join.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Left join two data frames — left_join","text":"x data frame: referred left R terminology, master Stata terminology. y data frame: referred right R terminology, using Stata terminology. character vector variables join . NULL, default, joyn natural join, using variables common names across two tables. message lists variables can check correct (suppress message, simply explicitly list variables want join). join different variables x y use vector expressions. example, = c(\"= b\", \"z\") use \"\" x, \"b\" y, \"z\" tables. copy x y data source, copy TRUE, y copied src x.  allows join tables across srcs, potentially expensive operation must opt . suffix non-joined duplicate variables x y, suffixes added output disambiguate . character vector length 2. keep join keys x y preserved output? NULL, default, joins equality retain keys x, joins inequality retain keys inputs. TRUE, keys inputs retained. FALSE, keys x retained. right full joins, data key columns corresponding rows exist y merged key columns x. used joining inequality conditions. na_matches two NA two NaN values match? \"na\", default, treats two NA two NaN values equal, like %%, match(), merge(). \"never\" treats two NA two NaN values different, never match together values. similar joins database sources base::merge(incomparables = NA). multiple Handling rows x multiple matches y. row x: \"\", default, returns every match detected y. behavior SQL. \"\" returns one match detected y, guarantees match returned. often faster \"first\" \"last\" just need detect least one match. \"first\" returns first match detected y. \"last\" returns last match detected y. unmatched unmatched keys result dropped rows handled? \"drop\" drops unmatched keys result. \"error\" throws error unmatched keys detected. unmatched intended protect accidentally dropping rows join. checks unmatched keys input potentially drop rows. left joins, checks y. right joins, checks x. inner joins, checks x y. case, unmatched also allowed character vector length 2 specify behavior x y independently. relationship Handling expected relationship keys x y. expectations chosen list invalidated, error thrown. NULL, default, expect relationship x y. However, equality joins check many--many relationship (typically unexpected) warn one occurs, encouraging either take closer look inputs make relationship explicit specifying \"many--many\". See Many--many relationships section details. \"one--one\" expects: row x matches 1 row y. row y matches 1 row x. \"one--many\" expects: row y matches 1 row x. \"many--one\" expects: row x matches 1 row y. \"many--many\" perform relationship checks, provided allow explicit relationship know exists. relationship handle cases zero matches. , see unmatched. y_vars_to_keep character: Vector variable names y kept merge. TRUE (default), keeps brings variables y x. FALSE NULL, bring variable x, report generated. update_values logical: TRUE, update values variables x actual variables y name ones x. NAs y used update actual values x. Yet, default, NAs x updated values y. avoid , make sure set update_NAs = FALSE update_NAs logical: TRUE, update NA values variables x actual values variables y name ones x. FALSE, NA values updated, even update_values TRUE reportvar character: Name reporting variable. Default \".joyn\". variable \"_merge\" Stata performing merge. FALSE NULL, reporting variable excluded final table, though summary join display concluding. reporttype character: One \"character\" \"numeric\". Default \"character\". \"numeric\", reporting variable contain  numeric codes source contents observation joined table. See information. roll double: implemented keep_common_vars logical: TRUE, keep original variable y tables common variable names. Thus, prefix \"y.\" added original name distinguish resulting variable joined table. sort logical: TRUE, sort key variables . Default TRUE. verbose logical: FALSE, display message (programmer's option). Default TRUE. ... Arguments passed joyn","code":""},{"path":"/reference/left_join.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Left join two data frames — left_join","text":"data frame","code":""},{"path":"/reference/left_join.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Left join two data frames — left_join","text":"","code":"# Simple left join library(data.table)  x1 = data.table(id = c(1L, 1L, 2L, 3L, NA_integer_),                 t  = c(1L, 2L, 1L, 2L, NA_integer_),                 x  = 11:15) y1 = data.table(id = c(1,2, 4),                 y  = c(11L, 15L, 16)) left_join(x1, y1, relationship = \"many-to-one\") #>  #> ── JOYn Report ── #>  #>    .joyn n percent #> 1:     x 2     40% #> 2: x & y 3     60% #> 3: total 5    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ℹ ❯ Joyn's report available in variable .joyn #> ℹ ❯ Removing key variables id from id and y #> ● Timing: The full joyn is executed in 8.8e-05 seconds #> ● Timing: the entire joyn function, including checks, is executed in 0.029235 #> seconds #>    id  t  x  y .joyn #> 1: NA NA 15 NA     x #> 2:  1  1 11 11 x & y #> 3:  1  2 12 11 x & y #> 4:  2  1 13 15 x & y #> 5:  3  2 14 NA     x"},{"path":"/reference/merge.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge two data frames — merge","title":"Merge two data frames — merge","text":"joyn wrapper works similar fashion base::merge data.table::merge, merge masks two.","code":""},{"path":"/reference/merge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge two data frames — merge","text":"","code":"merge(   x,   y,   by = NULL,   by.x = NULL,   by.y = NULL,   all = FALSE,   all.x = all,   all.y = all,   sort = TRUE,   suffixes = c(\".x\", \".y\"),   no.dups = TRUE,   allow.cartesian = getOption(\"datatable.allow.cartesian\"),   match_type = c(\"m:m\", \"m:1\", \"1:m\", \"1:1\"),   keep_common_vars = TRUE,   ... )"},{"path":"/reference/merge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge two data frames — merge","text":"x, y data tables. y coerced data.table one already. vector shared column names x y merge . defaults shared key columns two tables. y key columns, defaults key x. .x, .y Vectors column names x y merge . logical; = TRUE shorthand save setting .x = TRUE .y = TRUE. .x logical; TRUE, rows x matching row y included. rows 'NA's columns usually filled values y. default FALSE rows data x y included output. .y logical; analogous .x . sort logical. TRUE (default), rows merged data.table sorted setting key / .x columns. FALSE, unlike base R's merge row order unspecified, row order x retained (including retaining position missings .x=TRUE), followed y rows match x (.y=TRUE) retaining order appear y. suffixes character(2) specifying suffixes used making non-column names unique. suffix behaviour works similar fashion merge.data.frame method . .dups logical indicating suffixes also appended non-.y column names y column name .x. allow.cartesian See allow.cartesian [.data.table. match_type character: one \"m:m\", \"m:1\", \"1:m\", \"1:1\". Default \"1:1\" since restrictive. However, following Stata's recommendation, better explicit use three match types (See details match types sections). keep_common_vars logical: TRUE, keep original variable y tables common variable names. Thus, prefix \"y.\" added original name distinguish resulting variable joined table. ... Arguments passed joyn y_vars_to_keep character: Vector variable names y kept merge. TRUE (default), keeps brings variables y x. FALSE NULL, bring variable x, report generated. reportvar character: Name reporting variable. Default \".joyn\". variable \"_merge\" Stata performing merge. FALSE NULL, reporting variable excluded final table, though summary join display concluding. update_NAs logical: TRUE, update NA values variables x actual values variables y name ones x. FALSE, NA values updated, even update_values TRUE update_values logical: TRUE, update values variables x actual variables y name ones x. NAs y used update actual values x. Yet, default, NAs x updated values y. avoid , make sure set update_NAs = FALSE verbose logical: FALSE, display message (programmer's option). Default TRUE.","code":""},{"path":"/reference/merge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge two data frames — merge","text":"data.table merging x y","code":""},{"path":"/reference/merge.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge two data frames — merge","text":"","code":"x1 = data.frame(id = c(1L, 1L, 2L, 3L, NA_integer_),                 t  = c(1L, 2L, 1L, 2L, NA_integer_),                 x  = 11:15) y1 = data.frame(id = c(1,2, 4),                 y  = c(11L, 15L, 16)) merge(x1, y1, by = \"id\") #>   id t  x  y #> 1  1 1 11 11 #> 2  1 2 12 11 #> 3  2 1 13 15 # example of using by.x and by.y x2 = data.frame(id1 = c(1, 1, 2, 3, 3),                 id2 = c(1, 1, 2, 3, 4),                 t   = c(1L, 2L, 1L, 2L, NA_integer_),                 x   = c(16, 12, NA, NA, 15)) y2 = data.frame(id  = c(1, 2, 5, 6, 3),                 id2 = c(1, 1, 2, 3, 4),                 y   = c(11L, 15L, 20L, 13L, 10L),                 x   = c(16:20)) jn <- merge(x2,             y2,             match_type = \"m:m\",             all.x = TRUE,             by.x = \"id1\",             by.y = \"id2\") # example with all = TRUE jn <- merge(x2,             y2,             match_type = \"m:m\",             by.x = \"id1\",             by.y = \"id2\",             all = TRUE)"},{"path":"/reference/msg_type_dt.html","id":null,"dir":"Reference","previous_headings":"","what":"convert style of joyn message to data frame containing type and message — msg_type_dt","title":"convert style of joyn message to data frame containing type and message — msg_type_dt","text":"convert style joyn message data frame containing type message","code":""},{"path":"/reference/msg_type_dt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"convert style of joyn message to data frame containing type and message — msg_type_dt","text":"","code":"msg_type_dt(type, ...)"},{"path":"/reference/msg_type_dt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"convert style of joyn message to data frame containing type and message — msg_type_dt","text":"type character: one following: \"info\", \"note\", \"warn\", \"timing\", \"err\" ","code":""},{"path":"/reference/msg_type_dt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"convert style of joyn message to data frame containing type and message — msg_type_dt","text":"data frame two variables, type msg","code":""},{"path":"/reference/possible_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Find possible unique identifies of data frame — possible_ids","title":"Find possible unique identifies of data frame — possible_ids","text":"Identify possible variables uniquely identifying x","code":""},{"path":"/reference/possible_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find possible unique identifies of data frame — possible_ids","text":"","code":"possible_ids(   dt,   exclude = NULL,   include = NULL,   verbose = getOption(\"possible_ids.verbose\") )"},{"path":"/reference/possible_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find possible unique identifies of data frame — possible_ids","text":"dt data frame exclude character: Exclude variables selected identifiers. either name variables one type variable prefixed \"_\". instance, \"_numeric\" \"_character\". include character: Name variable included, might belong group excluded exclude verbose logical: FALSE message displayed. Default TRUE","code":""},{"path":"/reference/possible_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find possible unique identifies of data frame — possible_ids","text":"list possible identifiers","code":""},{"path":"/reference/possible_ids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find possible unique identifies of data frame — possible_ids","text":"","code":"library(data.table) x4 = data.table(id1 = c(1, 1, 2, 3, 3),                 id2 = c(1, 1, 2, 3, 4),                 t   = c(1L, 2L, 1L, 2L, NA_integer_),                 x   = c(16, 12, NA, NA, 15)) possible_ids(x4) #> ✔ There are no duplicates in data frame #> → we found 5 possible ids #> $V1 #> [1] \"id1\" \"t\"   #>  #> $V2 #> [1] \"id1\" \"x\"   #>  #> $V3 #> [1] \"id2\" \"t\"   #>  #> $V4 #> [1] \"id2\" \"x\"   #>  #> $V5 #> [1] \"t\" \"x\" #>"},{"path":"/reference/rename_to_valid.html","id":null,"dir":"Reference","previous_headings":"","what":"rename to syntactically valid names — rename_to_valid","title":"rename to syntactically valid names — rename_to_valid","text":"rename syntactically valid names","code":""},{"path":"/reference/rename_to_valid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"rename to syntactically valid names — rename_to_valid","text":"","code":"rename_to_valid(name, verbose = getOption(\"joyn.verbose\"))"},{"path":"/reference/rename_to_valid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"rename to syntactically valid names — rename_to_valid","text":"name character: name coerced syntactically valid name verbose logical: FALSE, display message (programmer's option). Default TRUE.","code":""},{"path":"/reference/rename_to_valid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"rename to syntactically valid names — rename_to_valid","text":"valid character name","code":""},{"path":"/reference/rename_to_valid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"rename to syntactically valid names — rename_to_valid","text":"","code":"rename_to_valid(\"x y\") #> ℹ name x y is an invalid variable name. It will be changed to x.y #> [1] \"x.y\""},{"path":"/reference/right_join.html","id":null,"dir":"Reference","previous_headings":"","what":"Right join two data frames — right_join","title":"Right join two data frames — right_join","text":"joyn wrapper works similar fashion dplyr::right_join","code":""},{"path":"/reference/right_join.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Right join two data frames — right_join","text":"","code":"right_join(   x,   y,   by = intersect(names(x), names(y)),   copy = FALSE,   suffix = c(\".x\", \".y\"),   keep = NULL,   na_matches = c(\"na\", \"never\"),   multiple = \"all\",   unmatched = \"drop\",   relationship = \"one-to-one\",   y_vars_to_keep = TRUE,   update_values = FALSE,   update_NAs = update_values,   reportvar = getOption(\"joyn.reportvar\"),   reporttype = c(\"character\", \"numeric\"),   roll = NULL,   keep_common_vars = FALSE,   sort = TRUE,   verbose = getOption(\"joyn.verbose\"),   ... )"},{"path":"/reference/right_join.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Right join two data frames — right_join","text":"x data frame: referred left R terminology, master Stata terminology. y data frame: referred right R terminology, using Stata terminology. character vector variables join . NULL, default, joyn natural join, using variables common names across two tables. message lists variables can check correct (suppress message, simply explicitly list variables want join). join different variables x y use vector expressions. example, = c(\"= b\", \"z\") use \"\" x, \"b\" y, \"z\" tables. copy x y data source, copy TRUE, y copied src x.  allows join tables across srcs, potentially expensive operation must opt . suffix non-joined duplicate variables x y, suffixes added output disambiguate . character vector length 2. keep join keys x y preserved output? NULL, default, joins equality retain keys x, joins inequality retain keys inputs. TRUE, keys inputs retained. FALSE, keys x retained. right full joins, data key columns corresponding rows exist y merged key columns x. used joining inequality conditions. na_matches two NA two NaN values match? \"na\", default, treats two NA two NaN values equal, like %%, match(), merge(). \"never\" treats two NA two NaN values different, never match together values. similar joins database sources base::merge(incomparables = NA). multiple Handling rows x multiple matches y. row x: \"\", default, returns every match detected y. behavior SQL. \"\" returns one match detected y, guarantees match returned. often faster \"first\" \"last\" just need detect least one match. \"first\" returns first match detected y. \"last\" returns last match detected y. unmatched unmatched keys result dropped rows handled? \"drop\" drops unmatched keys result. \"error\" throws error unmatched keys detected. unmatched intended protect accidentally dropping rows join. checks unmatched keys input potentially drop rows. left joins, checks y. right joins, checks x. inner joins, checks x y. case, unmatched also allowed character vector length 2 specify behavior x y independently. relationship Handling expected relationship keys x y. expectations chosen list invalidated, error thrown. NULL, default, expect relationship x y. However, equality joins check many--many relationship (typically unexpected) warn one occurs, encouraging either take closer look inputs make relationship explicit specifying \"many--many\". See Many--many relationships section details. \"one--one\" expects: row x matches 1 row y. row y matches 1 row x. \"one--many\" expects: row y matches 1 row x. \"many--one\" expects: row x matches 1 row y. \"many--many\" perform relationship checks, provided allow explicit relationship know exists. relationship handle cases zero matches. , see unmatched. y_vars_to_keep character: Vector variable names y kept merge. TRUE (default), keeps brings variables y x. FALSE NULL, bring variable x, report generated. update_values logical: TRUE, update values variables x actual variables y name ones x. NAs y used update actual values x. Yet, default, NAs x updated values y. avoid , make sure set update_NAs = FALSE update_NAs logical: TRUE, update NA values variables x actual values variables y name ones x. FALSE, NA values updated, even update_values TRUE reportvar character: Name reporting variable. Default \".joyn\". variable \"_merge\" Stata performing merge. FALSE NULL, reporting variable excluded final table, though summary join display concluding. reporttype character: One \"character\" \"numeric\". Default \"character\". \"numeric\", reporting variable contain  numeric codes source contents observation joined table. See information. roll double: implemented keep_common_vars logical: TRUE, keep original variable y tables common variable names. Thus, prefix \"y.\" added original name distinguish resulting variable joined table. sort logical: TRUE, sort key variables . Default TRUE. verbose logical: FALSE, display message (programmer's option). Default TRUE. ... Arguments passed joyn","code":""},{"path":"/reference/right_join.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Right join two data frames — right_join","text":"data frame","code":""},{"path":"/reference/right_join.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Right join two data frames — right_join","text":"","code":"# Simple right join library(data.table)  x1 = data.table(id = c(1L, 1L, 2L, 3L, NA_integer_),                 t  = c(1L, 2L, 1L, 2L, NA_integer_),                 x  = 11:15) y1 = data.table(id = c(1,2, 4),                 y  = c(11L, 15L, 16)) right_join(x1, y1, relationship = \"many-to-one\") #>  #> ── JOYn Report ── #>  #>    .joyn n percent #> 1: x & y 3     75% #> 2:     y 1     25% #> 3: total 4    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ℹ ❯ Joyn's report available in variable .joyn #> ℹ ❯ Removing key variables id from id and y #> ● Timing: The full joyn is executed in 7.8e-05 seconds #> ● Timing: the entire joyn function, including checks, is executed in 0.026935 #> seconds #>    id  t  x  y .joyn #> 1:  1  1 11 11 x & y #> 2:  1  2 12 11 x & y #> 3:  2  1 13 15 x & y #> 4:  4 NA NA 16     y"},{"path":"/reference/split_match_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Split matching type — split_match_type","title":"Split matching type — split_match_type","text":"Split matching type (one \"1:1\", \"m:1\", \"1:m\", \"m:m\") two components","code":""},{"path":"/reference/split_match_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split matching type — split_match_type","text":"","code":"split_match_type(match_type)"},{"path":"/reference/split_match_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split matching type — split_match_type","text":"match_type character: one \"m:m\", \"m:1\", \"1:m\", \"1:1\". Default \"1:1\" since restrictive. However, following Stata's recommendation, better explicit use three match types (See details match types sections).","code":""},{"path":"/reference/split_match_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split matching type — split_match_type","text":"character vector","code":""},{"path":"/reference/store_msg.html","id":null,"dir":"Reference","previous_headings":"","what":"Store joyn message to .joynenv environment — store_msg","title":"Store joyn message to .joynenv environment — store_msg","text":"Store joyn message .joynenv environment","code":""},{"path":"/reference/store_msg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Store joyn message to .joynenv environment — store_msg","text":"","code":"store_msg(type, ...)"},{"path":"/reference/store_msg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Store joyn message to .joynenv environment — store_msg","text":"type character: one following: \"info\", \"note\", \"warn\", \"timing\", \"err\" ... combination type text form style1 = text1, style2 = text2, etc.","code":""},{"path":"/reference/store_msg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Store joyn message to .joynenv environment — store_msg","text":"current message data frame invisibly","code":""},{"path":"/reference/style.html","id":null,"dir":"Reference","previous_headings":"","what":"style of text displayed — style","title":"style of text displayed — style","text":"adaptation https://github.com/r-lib/pkgbuild/blob/3ba537ab8a6ac07d3fe11c17543677d2a0786be6/R/styles.R","code":""},{"path":"/reference/style.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"style of text displayed — style","text":"","code":"style(..., sep = \"\")"},{"path":"/reference/style.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"style of text displayed — style","text":"... combination type text form type1 = text1, type2 = text2 sep character string separate terms paste","code":""},{"path":"/reference/style.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"style of text displayed — style","text":"formatted text","code":""},{"path":"/reference/x1.html","id":null,"dir":"Reference","previous_headings":"","what":"Testing data x1 — x1","title":"Testing data x1 — x1","text":"testing data","code":""},{"path":"/reference/x1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Testing data x1 — x1","text":"","code":"x1"},{"path":"/reference/x1.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Testing data x1 — x1","text":"data frame 5 rows 3 variables:","code":""},{"path":"/reference/x2.html","id":null,"dir":"Reference","previous_headings":"","what":"Testing data x2 — x2","title":"Testing data x2 — x2","text":"testing data","code":""},{"path":"/reference/x2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Testing data x2 — x2","text":"","code":"x2"},{"path":"/reference/x2.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Testing data x2 — x2","text":"data frame 5 rows 3 variables:","code":""},{"path":"/reference/x3.html","id":null,"dir":"Reference","previous_headings":"","what":"Testing data x3 — x3","title":"Testing data x3 — x3","text":"testing data","code":""},{"path":"/reference/x3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Testing data x3 — x3","text":"","code":"x3"},{"path":"/reference/x3.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Testing data x3 — x3","text":"data frame 3 rows 3 variables:","code":""},{"path":"/reference/x4.html","id":null,"dir":"Reference","previous_headings":"","what":"Testing data x4 — x4","title":"Testing data x4 — x4","text":"testing data","code":""},{"path":"/reference/x4.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Testing data x4 — x4","text":"","code":"x4"},{"path":"/reference/x4.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Testing data x4 — x4","text":"data frame 5 rows 4 variables:","code":""},{"path":"/reference/y1.html","id":null,"dir":"Reference","previous_headings":"","what":"Testing data y1 — y1","title":"Testing data y1 — y1","text":"testing data","code":""},{"path":"/reference/y1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Testing data y1 — y1","text":"","code":"y1"},{"path":"/reference/y1.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Testing data y1 — y1","text":"data frame 3 rows 2 variables:","code":""},{"path":"/reference/y2.html","id":null,"dir":"Reference","previous_headings":"","what":"Testing data y2 — y2","title":"Testing data y2 — y2","text":"testing data","code":""},{"path":"/reference/y2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Testing data y2 — y2","text":"","code":"y2"},{"path":"/reference/y2.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Testing data y2 — y2","text":"data frame 5 rows 4 variables:","code":""},{"path":"/reference/y3.html","id":null,"dir":"Reference","previous_headings":"","what":"Testing data y3 — y3","title":"Testing data y3 — y3","text":"testing data","code":""},{"path":"/reference/y3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Testing data y3 — y3","text":"","code":"y3"},{"path":"/reference/y3.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Testing data y3 — y3","text":"data frame 4 rows 2 variables:","code":""},{"path":"/reference/y4.html","id":null,"dir":"Reference","previous_headings":"","what":"Testing data y4 — y4","title":"Testing data y4 — y4","text":"testing data","code":""},{"path":"/reference/y4.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Testing data y4 — y4","text":"","code":"y4"},{"path":"/reference/y4.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Testing data y4 — y4","text":"data frame 5 rows 3 variables:","code":""},{"path":[]},{"path":"/news/index.html","id":"joyn-014","dir":"Changelog","previous_headings":"","what":"joyn 0.1.4","title":"joyn 0.1.4","text":"CRAN release: 2021-12-14 update_NAs now FALSE even update_values TRUE Select rows--keep transformation updated values NAs avoid keeping rows y match x whose values got updated update_values = TRUE Solve issues #1 #19 Change data.table::merge.data.table syntax joins. makes easier work consistent across different join types. Remove previous lazy-loaded data.","code":""},{"path":"/news/index.html","id":"joyn-013","dir":"Changelog","previous_headings":"","what":"joyn 0.1.3","title":"joyn 0.1.3","text":"CRAN release: 2021-04-28 Convert external data external data.","code":""},{"path":"/news/index.html","id":"joyn-012","dir":"Changelog","previous_headings":"","what":"joyn 0.1.2","title":"joyn 0.1.2","text":"Add function possible_ids() identify variables suitable uniquely identify database.","code":""},{"path":"/news/index.html","id":"joyn-0-1-2","dir":"Changelog","previous_headings":"","what":"joyn 0.1.1","title":"joyn 0.1.2","text":"Add function is_id() check whether table uniquely identified key variables Add function freq_table() substitute janitor::tabyl. makes convenient users janitor installed.","code":""},{"path":"/news/index.html","id":"joyn-0-1-2-1","dir":"Changelog","previous_headings":"","what":"joyn 0.1.0","title":"joyn 0.1.2","text":"Fix bug argument using “=” “==”.","code":""},{"path":"/news/index.html","id":"joyn-0-1-2-2","dir":"Changelog","previous_headings":"","what":"joyn 0.0.1","title":"joyn 0.1.2","text":"First Public release","code":""}]
